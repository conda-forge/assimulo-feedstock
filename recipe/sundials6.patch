diff --git a/src/lib/sundials_callbacks.pxi b/src/lib/sundials_callbacks.pxi
index 0a8db24..65ee2aa 100644
--- a/src/lib/sundials_callbacks.pxi
+++ b/src/lib/sundials_callbacks.pxi
@@ -22,19 +22,31 @@ import cython
 #=================
 
 cdef N_Vector N_VNewEmpty_Euclidean(long int n):
-  cdef N_Vector v = N_VNew_Serial(n)
-  v.ops.nvwrmsnorm = v.ops.nvwl2norm #Overwrite the WRMS norm to the 2-Norm
-  return v
+    IF SUNDIALS_VERSION >= (6,0,0):
+        cdef SUNDIALS.SUNContext ctx = NULL
+        cdef void * comm = NULL
+        SUNDIALS.SUNContext_Create(comm, &ctx)
+        cdef N_Vector v = N_VNew_Serial(n, ctx)
+    ELSE:
+        cdef N_Vector v = N_VNew_Serial(n)
+    v.ops.nvwrmsnorm = v.ops.nvwl2norm #Overwrite the WRMS norm to the 2-Norm
+    return v
 
 cdef inline N_Vector arr2nv(x):
     x=N.array(x)
     cdef long int n = len(x)
     cdef N.ndarray[realtype, ndim=1,mode='c'] ndx=x
     cdef void* data_ptr=PyArray_DATA(ndx)
-    cdef N_Vector v=N_VNew_Serial(n)
+    IF SUNDIALS_VERSION >= (6,0,0):
+        cdef SUNDIALS.SUNContext ctx = NULL
+        cdef void * comm = NULL
+        SUNDIALS.SUNContext_Create(comm, &ctx)
+        cdef N_Vector v = N_VNew_Serial(n, ctx)
+    ELSE:
+        cdef N_Vector v = N_VNew_Serial(n)
     memcpy((<N_VectorContent_Serial>v.content).data, data_ptr, n*sizeof(realtype))
     return v
-    
+
 cdef inline N_Vector arr2nv_euclidean(x):
     x=N.array(x)
     cdef long int n = len(x)
diff --git a/src/lib/sundials_includes.pxd b/src/lib/sundials_includes.pxd
index b2af67f..09d3fab 100644
--- a/src/lib/sundials_includes.pxd
+++ b/src/lib/sundials_includes.pxd
@@ -33,6 +33,13 @@ from numpy cimport NPY_DOUBLE, npy_intp, NPY_INT
 #External definitions from Sundials headers
 #==============================================
 
+IF SUNDIALS_VERSION >= (6,0,0):
+    cdef extern from "sundials/sundials_context.h":
+        ctypedef _SUNContext * SUNContext
+        cdef struct _SUNContext:
+            pass
+        int SUNContext_Create(void* comm, SUNContext* ctx)
+
 cdef extern from "sundials/sundials_types.h":
     ctypedef double realtype
     ctypedef bint booleantype # should be bool instead of bint, but there is a bug in Cython
@@ -56,14 +63,21 @@ cdef extern from "nvector/nvector_serial.h":
         realtype* data
     ctypedef _N_VectorContent_Serial* N_VectorContent_Serial
     cdef N_Vector N_VMake_Serial(long int vec_length, realtype *v_data)
-    N_Vector *N_VCloneVectorArray_Serial(int count, N_Vector w)
-    N_Vector *N_VCloneVectorArrayEmpty_Serial(int count, N_Vector w)
     void N_VSetArrayPointer_Serial(realtype *v_data, N_Vector v)
     void N_VConst_Serial(realtype c, N_Vector z)
-    N_Vector N_VNew_Serial(long int vec_length)
-    void N_VDestroy_Serial(N_Vector v)
+    IF SUNDIALS_VERSION >= (6,0,0):
+        N_Vector N_VNew_Serial(long int vec_length, SUNContext ctx)
+        N_Vector *N_VCloneVectorArray(int count, N_Vector w)
+        N_Vector *N_VCloneVectorArrayEmpty(int count, N_Vector w)
+        void N_VDestroy(N_Vector v)
+    ELSE:
+        N_Vector N_VNew_Serial(long int vec_length)
+        N_Vector *N_VCloneVectorArray_Serial(int count, N_Vector w)
+        N_Vector *N_VCloneVectorArrayEmpty_Serial(int count, N_Vector w)
+        void N_VDestroy_Serial(N_Vector v)
     void N_VPrint_Serial(N_Vector v)
 
+
 IF SUNDIALS_VERSION >= (4,0,0):
     cdef extern from "sundials/sundials_nonlinearsolver.h":
         ctypedef _generic_SUNNonlinearSolver *SUNNonlinearSolver
@@ -144,7 +158,10 @@ IF SUNDIALS_VERSION >= (3,0,0):
             realtype *data
             sunindextype ldata
             realtype **cols
-        SUNMatrix SUNDenseMatrix(sunindextype M, sunindextype N)
+        IF SUNDIALS_VERSION >= (6,0,0):
+            SUNMatrix SUNDenseMatrix(sunindextype M, sunindextype N, SUNContext ctx)
+        ELSE:
+            SUNMatrix SUNDenseMatrix(sunindextype M, sunindextype N)
     cdef extern from "sunmatrix/sunmatrix_sparse.h":
         ctypedef _SUNMatrixContent_Sparse *SUNMatrixContent_Sparse
         cdef struct _SUNMatrixContent_Sparse:
@@ -160,12 +177,27 @@ IF SUNDIALS_VERSION >= (3,0,0):
             sunindextype **colptrs
             sunindextype **colvals
             sunindextype **rowptrs
-        SUNMatrix SUNSparseMatrix(sunindextype M, sunindextype N, sunindextype NNZ, int sparsetype)
+        IF SUNDIALS_VERSION >= (6,0,0):
+            SUNMatrix SUNSparseMatrix(sunindextype M, sunindextype N, sunindextype NNZ, int sparsetype, SUNContext ctx)
+        ELSE:
+            SUNMatrix SUNSparseMatrix(sunindextype M, sunindextype N, sunindextype NNZ, int sparsetype)
     cdef extern from "sunlinsol/sunlinsol_dense.h":
-        SUNLinearSolver SUNDenseLinearSolver(N_Vector y, SUNMatrix A)
+        IF SUNDIALS_VERSION >= (4,0,0):
+            IF SUNDIALS_VERSION >= (6,0,0):
+                SUNLinearSolver SUNLinSol_Dense(N_Vector y, SUNMatrix A, SUNContext ctx)
+            ELSE:
+                SUNLinearSolver SUNLinSol_Dense(N_Vector y, SUNMatrix A)
+        ELSE:
+            SUNLinearSolver SUNDenseLinearSolver(N_Vector y, SUNMatrix A)
     cdef extern from "sunlinsol/sunlinsol_spgmr.h":
-        SUNLinearSolver SUNSPGMR(N_Vector y, int pretype, int maxl)
-        
+        IF SUNDIALS_VERSION >= (4,0,0):
+            IF SUNDIALS_VERSION >= (6,0,0):
+                SUNLinearSolver SUNLinSol_SPGMR(N_Vector y, int pretype, int maxl, SUNContext ctx)
+            ELSE:
+                SUNLinearSolver SUNLinSol_SPGMR(N_Vector y, int pretype, int maxl)
+        ELSE:
+            SUNLinearSolver SUNSPGMR(N_Vector y, int pretype, int maxl)
+
 ELSE: 
     #Dummy defines
     ctypedef void *SUNLinearSolver
@@ -249,18 +281,29 @@ ELSE:
 
 IF SUNDIALS_VERSION >= (4,0,0):
     cdef extern from "cvodes/cvodes.h":
-        void* CVodeCreate(int lmm)
-        
+        IF SUNDIALS_VERSION >= (6,0,0):
+            void* CVodeCreate(int lmm, SUNContext ctx)
+        ELSE:
+            void* CVodeCreate(int lmm)
+
         int CVodeSetNonlinearSolver(void *cvode_mem, SUNNonlinearSolver NLS)
         int CVodeSetNonlinearSolverSensSim(void *cvode_mem, SUNNonlinearSolver NLS)
         int CVodeSetNonlinearSolverSensStg(void *cvode_mem, SUNNonlinearSolver NLS)
     
     cdef extern from "sunnonlinsol/sunnonlinsol_newton.h":
-        SUNNonlinearSolver SUNNonlinSol_Newton(N_Vector y)
-        SUNNonlinearSolver SUNNonlinSol_NewtonSens(int count, N_Vector y)
+        IF SUNDIALS_VERSION >= (6,0,0):
+            SUNNonlinearSolver SUNNonlinSol_Newton(N_Vector y, SUNContext ctx)
+            SUNNonlinearSolver SUNNonlinSol_NewtonSens(int count, N_Vector y, SUNContext ctx)
+        ELSE:
+            SUNNonlinearSolver SUNNonlinSol_Newton(N_Vector y)
+            SUNNonlinearSolver SUNNonlinSol_NewtonSens(int count, N_Vector y)
     cdef extern from "sunnonlinsol/sunnonlinsol_fixedpoint.h":
-        SUNNonlinearSolver SUNNonlinSol_FixedPoint(N_Vector y, int m)
-        SUNNonlinearSolver SUNNonlinSol_FixedPointSens(int count, N_Vector y, int m)
+        IF SUNDIALS_VERSION >= (6,0,0):
+            SUNNonlinearSolver SUNNonlinSol_FixedPoint(N_Vector y, int m, SUNContext ctx)
+            SUNNonlinearSolver SUNNonlinSol_FixedPointSens(int count, N_Vector y, int m, SUNContext ctx)
+        ELSE:
+            SUNNonlinearSolver SUNNonlinSol_FixedPoint(N_Vector y, int m)
+            SUNNonlinearSolver SUNNonlinSol_FixedPointSens(int count, N_Vector y, int m)
 ELSE:
     cdef extern from "cvodes/cvodes.h":
         void* CVodeCreate(int lmm, int iter)
@@ -308,8 +351,12 @@ cdef extern from "cvodes/cvodes.h":
     int CVodeGetActualInitStep(void * cvode_mem, realtype *hinused)
     int CVodeGetNumSteps(void *cvode_mem, long int *nsteps) #Number of steps
     int CVodeGetNumRhsEvals(void *cvode_mem, long int *nrevals) #Number of function evals
-    int CVDlsGetNumJacEvals(void *cvode_mem, long int *njevals) #Number of jac evals
-    int CVDlsGetNumRhsEvals(void *cvode_mem, long int *nrevalsLS) #Number of res evals due to jac evals
+    IF SUNDIALS_VERSION >= (4,0,0):
+        int CVodeGetNumJacEvals(void *cvode_mem, long int *njevals) #Number of jac evals
+        int CVodeGetNumLinRhsEvals(void *cvode_mem, long int *nrevalsLS) #Number of res evals due to jac evals
+    ELSE:
+        int CVDlsGetNumJacEvals(void *cvode_mem, long int *njevals) #Number of jac evals
+        int CVDlsGetNumRhsEvals(void *cvode_mem, long int *nrevalsLS) #Number of res evals due to jac evals
     int CVodeGetNumGEvals(void *cvode_mem, long int *ngevals) #Number of root evals
     int CVodeGetNumErrTestFails(void *cvode_mem, long int *netfails) #Number of local error test failures
     int CVodeGetNumNonlinSolvIters(void *cvode_mem, long int *nniters) #Number of nonlinear iteration
@@ -369,13 +416,19 @@ IF SUNDIALS_VERSION >= (3,0,0):
     cdef extern from "cvodes/cvodes_direct.h":
         ctypedef int (*CVDlsDenseJacFn)(realtype t, N_Vector y, N_Vector fy, 
                        SUNMatrix Jac, void *user_data, N_Vector tmp1, N_Vector tmp2, N_Vector tmp3)
-        int CVDlsSetLinearSolver(void *cvode_mem, SUNLinearSolver LS, SUNMatrix A)
-        int CVDlsSetJacFn(void *cvode_mem, CVDlsDenseJacFn djac)
+        IF SUNDIALS_VERSION >= (4,0,0):
+            int CVodeSetLinearSolver(void *cvode_mem, SUNLinearSolver LS, SUNMatrix A)
+            int CVodeSetJacFn(void *cvode_mem, CVDlsDenseJacFn djac)
+        ELSE:
+            int CVDlsSetLinearSolver(void *cvode_mem, SUNLinearSolver LS, SUNMatrix A)
+            int CVDlsSetJacFn(void *cvode_mem, CVDlsDenseJacFn djac)
     cdef extern from "cvodes/cvodes_spils.h":
-        int CVSpilsSetLinearSolver(void *cvode_mem, SUNLinearSolver LS)
         ctypedef int (*CVSpilsJacTimesSetupFn)(realtype t, N_Vector y, N_Vector fy, void *user_data)
-        int CVSpilsSetJacTimes(void *cvode_mem, CVSpilsJacTimesSetupFn jtsetup, CVSpilsJacTimesVecFn jtimes)
-
+        IF SUNDIALS_VERSION >= (4,0,0):
+            int CVodeSetJacTimes(void *cvode_mem, CVSpilsJacTimesSetupFn jtsetup, CVSpilsJacTimesVecFn jtimes)
+        ELSE:
+            int CVSpilsSetLinearSolver(void *cvode_mem, SUNLinearSolver LS)
+            int CVSpilsSetJacTimes(void *cvode_mem, CVSpilsJacTimesSetupFn jtsetup, CVSpilsJacTimesVecFn jtimes)
         ctypedef int (*CVSpilsPrecSetupFn)(realtype t, N_Vector y, N_Vector fy,
 				  booleantype jok, booleantype *jcurPtr, realtype gamma, void *user_data)
         ctypedef int (*CVSpilsPrecSolveFn)(realtype t, N_Vector y, N_Vector fy,
@@ -436,15 +489,25 @@ ELSE:
         cdef inline tuple version(): return (2,5,0)
     
 cdef extern from "cvodes/cvodes_spils.h":
-    int CVSpilsSetPreconditioner(void *cvode_mem, CVSpilsPrecSetupFn psetup, CVSpilsPrecSolveFn psolve)
-    int CVSpilsGetNumJtimesEvals(void *cvode_mem, long int *njvevals) #Number of jac*vector evals
-    int CVSpilsGetNumRhsEvals(void *cvode_mem, long int *nfevalsLS) #Number of res evals due to jacÄvector evals
-    int CVSpilsGetNumPrecEvals(void *cvode_mem, long int *npevals)
-    int CVSpilsGetNumPrecSolves(void *cvode_mem, long int *npsolves)
+    IF SUNDIALS_VERSION >= (4,0,0):
+        int CVodeSetPreconditioner(void *cvode_mem, CVSpilsPrecSetupFn psetup, CVSpilsPrecSolveFn psolve)
+        int CVodeGetNumJtimesEvals(void *cvode_mem, long int *njvevals) #Number of jac*vector evals
+        int CVodeGetNumRhsEvals(void *cvode_mem, long int *nfevalsLS) #Number of res evals due to jacÄvector evals
+        int CVodeGetNumPrecEvals(void *cvode_mem, long int *npevals)
+        int CVodeGetNumPrecSolves(void *cvode_mem, long int *npsolves)
+    ELSE:
+        int CVSpilsSetPreconditioner(void *cvode_mem, CVSpilsPrecSetupFn psetup, CVSpilsPrecSolveFn psolve)
+        int CVSpilsGetNumJtimesEvals(void *cvode_mem, long int *njvevals) #Number of jac*vector evals
+        int CVSpilsGetNumRhsEvals(void *cvode_mem, long int *nfevalsLS) #Number of res evals due to jacÄvector evals
+        int CVSpilsGetNumPrecEvals(void *cvode_mem, long int *npevals)
+        int CVSpilsGetNumPrecSolves(void *cvode_mem, long int *npsolves)
 
 cdef extern from "idas/idas.h":
     ctypedef int (*IDAResFn)(realtype tt, N_Vector yy, N_Vector yp, N_Vector rr, void *user_data)
-    void* IDACreate()
+    IF SUNDIALS_VERSION >= (6,0,0):
+        void* IDACreate(SUNContext ctx)
+    ELSE:
+        void* IDACreate()
     int IDAInit(void* ida_mem, IDAResFn res, realtype t0, N_Vector y0, N_Vector yp0)
     int IDAReInit(void* ida_mem, realtype t0, N_Vector y0, N_Vector yp0)
     void IDAFree(void **ida_mem)
@@ -491,8 +554,12 @@ cdef extern from "idas/idas.h":
     int IDAGetCurrentOrder(void *ida_mem,int *qcurrent)                 #Order that is about to be tried
     int IDAGetNumSteps(void *ida_mem, long int *nsteps)                 #Number of steps
     int IDAGetNumResEvals(void *ida_mem, long int *nrevals)             #Number of res evals
-    int IDADlsGetNumJacEvals(void *ida_mem, long int *njevals)          #Number of jac evals
-    int IDADlsGetNumResEvals(void *ida_mem, long int *nrevalsLS)        #Number of res evals due to jac evals
+    IF SUNDIALS_VERSION >= (4,0,0):
+        int IDAGetNumJacEvals(void *ida_mem, long int *njevals)          #Number of jac evals
+        int IDAGetNumResEvals(void *ida_mem, long int *nrevalsLS)        #Number of res evals due to jac evals
+    ELSE:
+        int IDADlsGetNumJacEvals(void *ida_mem, long int *njevals)          #Number of jac evals
+        int IDADlsGetNumResEvals(void *ida_mem, long int *nrevalsLS)        #Number of res evals due to jac evals
     int IDAGetNumGEvals(void *ida_mem, long int *ngevals)               #Number of root evals
     int IDAGetNumErrTestFails(void *ida_mem, long int *netfails)        #Number of local error test failures
     int IDAGetNumNonlinSolvIters(void *ida_mem, long int *nniters)      #Number of nonlinear iteration
@@ -551,15 +618,25 @@ IF SUNDIALS_VERSION >= (3,0,0):
         ctypedef int (*IDADlsDenseJacFn)(realtype tt, realtype cj, N_Vector yy, 
                        N_Vector yp, N_Vector rr, SUNMatrix Jac, void *user_data, 
                        N_Vector tmp1, N_Vector tmp2, N_Vector tmp3)
-        int IDADlsSetJacFn(void *ida_mem, IDADlsDenseJacFn djac)
-        int IDADlsSetLinearSolver(void *ida_mem, SUNLinearSolver LS, SUNMatrix A)
+        IF SUNDIALS_VERSION >= (4,0,0):
+            int IDASetJacFn(void *ida_mem, IDADlsDenseJacFn djac)
+            int IDASetLinearSolver(void *ida_mem, SUNLinearSolver LS, SUNMatrix A)
+        ELSE:
+            int IDADlsSetJacFn(void *ida_mem, IDADlsDenseJacFn djac)
+            int IDADlsSetLinearSolver(void *ida_mem, SUNLinearSolver LS, SUNMatrix A)
     
     cdef extern from "idas/idas_spils.h":
-        int IDASpilsSetLinearSolver(void *ida_mem, SUNLinearSolver LS)
         ctypedef int (*IDASpilsJacTimesSetupFn)(realtype tt, N_Vector yy,
-                    N_Vector yp, N_Vector rr, realtype c_j, void *user_data)
-        int IDASpilsSetJacTimes(void *ida_mem,
+                      N_Vector yp, N_Vector rr, realtype c_j, void *user_data)
+        IF SUNDIALS_VERSION >= (4,0,0):
+            int IDASetJacTimes(void *ida_mem,
+                IDASpilsJacTimesSetupFn jtsetup, IDASpilsJacTimesVecFn jtimes)
+        ELSE:
+            int IDASpilsSetLinearSolver(void *ida_mem, SUNLinearSolver LS)
+            int IDASpilsSetJacTimes(void *ida_mem,
                 IDASpilsJacTimesSetupFn jtsetup, IDASpilsJacTimesVecFn jtimes)
+
+
                 
     cdef inline int ida_spils_jtsetup_dummy(realtype tt, N_Vector yy, N_Vector yp, N_Vector rr, realtype c_j, void *user_data): return 0
 ELSE:
@@ -577,8 +654,12 @@ ELSE:
         int IDASpilsSetJacTimesVecFn(void *ida_mem, IDASpilsJacTimesVecFn ida_jacv)
 
 cdef extern from "idas/idas_spils.h":
-    int IDASpilsGetNumJtimesEvals(void *ida_mem, long int *njvevals) #Number of jac*vector
-    int IDASpilsGetNumResEvals(void *ida_mem, long int *nfevalsLS) #Number of rhs due to jac*vector
+    IF SUNDIALS_VERSION >= (4,0,0):
+        int IDAGetNumJtimesEvals(void *ida_mem, long int *njvevals) #Number of jac*vector
+        int IDAGetNumResEvals(void *ida_mem, long int *nfevalsLS) #Number of rhs due to jac*vector
+    ELSE:
+        int IDASpilsGetNumJtimesEvals(void *ida_mem, long int *njvevals) #Number of jac*vector
+        int IDASpilsGetNumResEvals(void *ida_mem, long int *nfevalsLS) #Number of rhs due to jac*vector
 
 
 ####################
@@ -593,7 +674,10 @@ cdef extern from "kinsol/kinsol.h":
     ctypedef void (*KINErrHandlerFn)(int error_code, char *module, char *function, char *msg, void *user_data)
     ctypedef void (*KINInfoHandlerFn)(const char *module, const char *function, char *msg, void *user_data)
     # initialization routines
-    void *KINCreate()
+    IF SUNDIALS_VERSION >= (6,0,0):
+        void *KINCreate(SUNContext ctx)
+    ELSE:
+        void *KINCreate()
     int KINInit(void *kinmem, KINSysFn func, N_Vector tmpl)
 
     # optional input spec. functions,
@@ -642,9 +726,12 @@ cdef extern from "kinsol/kinsol.h":
 IF SUNDIALS_VERSION >= (3,0,0):
     cdef extern from "kinsol/kinsol_direct.h":
         ctypedef int (*KINDlsDenseJacFn)(N_Vector u, N_Vector fu, SUNMatrix J, void *user_data, N_Vector tmp1, N_Vector tmp2)
-        int KINDlsSetLinearSolver(void *kinmem, SUNLinearSolver LS, SUNMatrix A)
-        int KINDlsSetJacFn(void *kinmem, KINDlsDenseJacFn djac)
-    
+        IF SUNDIALS_VERSION < (4,0,0):
+            int KINDlsSetLinearSolver(void *kinmem, SUNLinearSolver LS, SUNMatrix A)
+            int KINDlsSetJacFn(void *kinmem, KINDlsDenseJacFn djac)
+        ELSE:
+            int KINSetLinearSolver(void *kinmem, SUNLinearSolver LS, SUNMatrix A)
+            int KINSetJacFn(void *kinmem, KINDlsDenseJacFn djac)
     cdef extern from "kinsol/kinsol_spils.h":
         int KINSpilsSetLinearSolver(void *kinsol_mem, SUNLinearSolver LS)
         
@@ -676,23 +763,37 @@ ELSE:
 cdef extern from "kinsol/kinsol_direct.h":
     # optional output fcts for linear direct solver
     int KINDlsGetWorkSpace(void *kinmem, long int *lenrwB, long int *leniwB)
-    int KINDlsGetNumJacEvals(void *kinmem, long int *njevalsB)
-    int KINDlsGetNumFuncEvals(void *kinmem, long int *nfevalsB)
-    int KINDlsGetLastFlag(void *kinmem, long int *flag)
+    IF SUNDIALS_VERSION >= (4,0,0):
+        int KINGetLastLinFlag(void *kinmem, long int *flag)
+        int KINGetNumJacEvals(void *kinmem, long int *njevalsB)
+        int KINGetNumFuncEvals(void *kinmem, long int *nfevalsB)
+    ELSE:
+        int KINDlsGetLastFlag(void *kinmem, long int *flag)
+        int KINDlsGetNumJacEvals(void *kinmem, long int *njevalsB)
+        int KINDlsGetNumFuncEvals(void *kinmem, long int *nfevalsB)
     char *KINDlsGetReturnFlagName(int flag)
 
 cdef extern from "kinsol/kinsol_spils.h":
     ctypedef int (*KINSpilsJacTimesVecFn)(N_Vector vv, N_Vector Jv, N_Vector vx, int* new_u,
                 void *problem_data)
-
-    int KINSpilsSetJacTimesVecFn(void *kinmem, KINSpilsJacTimesVecFn jacv)
-    int KINSpilsGetNumLinIters(void *kinmem, long int *nliters)
-    int KINSpilsGetNumConvFails(void *kinmem, long int *nlcfails)
-    int KINSpilsGetNumPrecEvals(void *kinmem, long int *npevals)
-    int KINSpilsGetNumPrecSolves(void *kinmem, long int *npsolves)
-    int KINSpilsGetNumJtimesEvals(void *kinmem, long int *njevals)
-    int KINSpilsGetNumFuncEvals(void *kinmem, long int *nfevalsLS)
-    int KINSpilsSetPreconditioner(void *kinmem, KINSpilsPrecSetupFn psetup, KINSpilsPrecSolveFn psolve)
+    IF SUNDIALS_VERSION >= (4,0,0):
+        int KINSetJacTimesVecFn(void *kinmem, KINSpilsJacTimesVecFn jacv)
+        int KINSetPreconditioner(void *kinmem, KINSpilsPrecSetupFn psetup, KINSpilsPrecSolveFn psolve)
+        int KINGetNumLinIters(void *kinmem, long int *nliters)
+        int KINGetNumLinConvFails(void *kinmem, long int *nlcfails)
+        int KINGetNumPrecEvals(void *kinmem, long int *npevals)
+        int KINGetNumPrecSolves(void *kinmem, long int *npsolves)
+        int KINGetNumJtimesEvals(void *kinmem, long int *njevals)
+        int KINGetNumFuncEvals(void *kinmem, long int *nfevalsLS)
+    ELSE:
+        int KINSpilsSetJacTimesVecFn(void *kinmem, KINSpilsJacTimesVecFn jacv)
+        int KINSpilsSetPreconditioner(void *kinmem, KINSpilsPrecSetupFn psetup, KINSpilsPrecSolveFn psolve)
+        int KINSpilsGetNumLinIters(void *kinmem, long int *nliters)
+        int KINSpilsGetNumConvFails(void *kinmem, long int *nlcfails)
+        int KINSpilsGetNumPrecEvals(void *kinmem, long int *npevals)
+        int KINSpilsGetNumPrecSolves(void *kinmem, long int *npsolves)
+        int KINSpilsGetNumJtimesEvals(void *kinmem, long int *njevals)
+        int KINSpilsGetNumFuncEvals(void *kinmem, long int *nfevalsLS)
 
 #=========================
 # END SUNDIALS DEFINITIONS
diff --git a/src/solvers/kinsol.pyx b/src/solvers/kinsol.pyx
index c6ae701..efdf76c 100644
--- a/src/solvers/kinsol.pyx
+++ b/src/solvers/kinsol.pyx
@@ -34,8 +34,11 @@ from sundials_includes cimport N_Vector, realtype, N_VectorContent_Serial, DENSE
 from sundials_includes cimport memcpy, N_VNew_Serial, DlsMat, SUNMatrix, SUNMatrixContent_Dense, SUNMatrixContent_Sparse
 IF SUNDIALS_VERSION < (5,0,0):
     from sundials_includes cimport SlsMat
-from sundials_includes cimport malloc, free, N_VCloneVectorArray_Serial
-from sundials_includes cimport N_VConst_Serial, N_VDestroy_Serial
+from sundials_includes cimport malloc, free
+IF SUNDIALS_VERSION >= (6,0,0):
+    from sundials_includes cimport N_VDestroy
+ELSE:
+    from sundials_includes cimport N_VDestroy_Serial as N_VDestroy
 
 include "constants.pxi" #Includes the constants (textual include)
 include "../lib/sundials_constants.pxi" #Sundials related constants
@@ -110,7 +113,7 @@ cdef class KINSOL(Algebraic):
         
         if self.y_temp != NULL:
             #Deallocate N_Vector
-            N_VDestroy_Serial(self.y_temp)
+            N_VDestroy(self.y_temp)
         
         if self.kinsol_mem != NULL:
             #Free Memory
@@ -183,15 +186,21 @@ cdef class KINSOL(Algebraic):
             
     cdef initialize_kinsol(self):
         cdef int flag #Used for return
+        IF SUNDIALS_VERSION >= (6,0,0):
+            cdef SUNDIALS.SUNContext ctx = NULL
+            cdef void * comm = NULL
+            SUNDIALS.SUNContext_Create(comm, &ctx)
 
         self.y_temp  = arr2nv(self.y)
         self.y_scale = arr2nv([1.0]*self.problem_info["dim"])
         self.f_scale = arr2nv([1.0]*self.problem_info["dim"])
    
         if self.kinsol_mem == NULL: #The solver is not initialized
-            
             #Create the solver
-            self.kinsol_mem = SUNDIALS.KINCreate()
+            IF SUNDIALS_VERSION >= (6,0,0):
+                self.kinsol_mem = SUNDIALS.KINCreate(ctx)
+            ELSE:
+                self.kinsol_mem = SUNDIALS.KINCreate()
             if self.kinsol_mem == NULL:
                 raise KINSOLError(KIN_MEM_NULL)
             self.pData.KIN_MEM = self.kinsol_mem
@@ -220,14 +229,30 @@ cdef class KINSOL(Algebraic):
             raise KINSOLError(flag)
             
     cpdef add_linear_solver(self):
+        IF SUNDIALS_VERSION >= (6,0,0):
+            cdef SUNDIALS.SUNContext ctx = NULL
+            cdef void * comm = NULL
+            SUNDIALS.SUNContext_Create(comm, &ctx)
         if self.options["linear_solver"] == "DENSE":
             IF SUNDIALS_VERSION >= (3,0,0):
                 #Create a dense Sundials matrix
-                self.sun_matrix = SUNDIALS.SUNDenseMatrix(self.pData.dim, self.pData.dim)
+                IF SUNDIALS_VERSION >= (6,0,0):
+                    self.sun_matrix = SUNDIALS.SUNDenseMatrix(self.pData.dim, self.pData.dim, ctx)
+                ELSE:
+                    self.sun_matrix = SUNDIALS.SUNDenseMatrix(self.pData.dim, self.pData.dim)
                 #Create a dense Sundials linear solver
-                self.sun_linearsolver = SUNDIALS.SUNDenseLinearSolver(self.y_temp, self.sun_matrix)
+                IF SUNDIALS_VERSION >= (4,0,0):
+                    IF SUNDIALS_VERSION >= (6,0,0):
+                        self.sun_linearsolver = SUNDIALS.SUNLinSol_Dense(self.y_temp, self.sun_matrix, ctx)
+                    ELSE:
+                        self.sun_linearsolver = SUNDIALS.SUNLinSol_Dense(self.y_temp, self.sun_matrix)
+                ELSE:
+                    self.sun_linearsolver = SUNDIALS.SUNDenseLinearSolver(self.y_temp, self.sun_matrix)
                 #Attach it to Kinsol
-                flag = SUNDIALS.KINDlsSetLinearSolver(self.kinsol_mem, self.sun_linearsolver, self.sun_matrix)
+                IF SUNDIALS_VERSION >= (4,0,0):
+                    flag = SUNDIALS.KINSetLinearSolver(self.kinsol_mem, self.sun_linearsolver, self.sun_matrix)
+                ELSE:
+                    flag = SUNDIALS.KINDlsSetLinearSolver(self.kinsol_mem, self.sun_linearsolver, self.sun_matrix)
             ELSE:
                 flag = SUNDIALS.KINDense(self.kinsol_mem, self.problem_info["dim"])
             if flag < 0:
@@ -235,7 +260,10 @@ cdef class KINSOL(Algebraic):
             
             if self.problem_info["jac_fcn"]:
                 IF SUNDIALS_VERSION >= (3,0,0):
-                    flag = SUNDIALS.KINDlsSetJacFn(self.kinsol_mem, kin_jac);
+                    IF SUNDIALS_VERSION >= (4,0,0):
+                        flag = SUNDIALS.KINSetJacFn(self.kinsol_mem, kin_jac)
+                    ELSE:
+                        flag = SUNDIALS.KINDlsSetJacFn(self.kinsol_mem, kin_jac)
                 ELSE:
                     flag = SUNDIALS.KINDlsSetDenseJacFn(self.kinsol_mem, kin_jac);
                 if flag < 0:
@@ -243,31 +271,52 @@ cdef class KINSOL(Algebraic):
         elif self.options["linear_solver"] == "SPGMR":
             IF SUNDIALS_VERSION >= (3,0,0):
                 #Create the linear solver
-                self.sun_linearsolver = SUNDIALS.SUNSPGMR(self.y_temp, self.options["precond"], self.options["max_krylov"])
+                IF SUNDIALS_VERSION >= (4,0,0):
+                    IF SUNDIALS_VERSION >= (6,0,0):
+                        self.sun_linearsolver = SUNDIALS.SUNLinSol_SPGMR(self.y_temp, self.options["precond"], self.options["max_krylov"], ctx)
+                    ELSE:
+                       self.sun_linearsolver = SUNDIALS.SUNLinSol_SPGMR(self.y_temp, self.options["precond"], self.options["max_krylov"])
+                ELSE:
+                    self.sun_linearsolver = SUNDIALS.SUNSPGMR(self.y_temp, self.options["precond"], self.options["max_krylov"])
                 #Attach it to Kinsol
-                flag = SUNDIALS.KINSpilsSetLinearSolver(self.kinsol_mem, self.sun_linearsolver)
+                IF SUNDIALS_VERSION >= (4,0,0):
+                    flag = SUNDIALS.KINSetLinearSolver(self.kinsol_mem, self.sun_linearsolver, NULL)
+                ELSE:
+                    flag = SUNDIALS.KINSpilsSetLinearSolver(self.kinsol_mem, self.sun_linearsolver)
             ELSE:
                 #Specify the use of KINSpgmr linear solver.
                 flag = SUNDIALS.KINSpgmr(self.kinsol_mem, self.options["max_krylov"])
             if flag < 0:
                 raise KINSOLError(flag)
             
-            if self.problem_info["jacv_fcn"]:    
-                flag = SUNDIALS.KINSpilsSetJacTimesVecFn(self.kinsol_mem, kin_jacv)
+            if self.problem_info["jacv_fcn"]:
+                IF SUNDIALS_VERSION >= (4,0,0):
+                    flag = SUNDIALS.KINSetJacTimesVecFn(self.kinsol_mem, kin_jacv)
+                ELSE:
+                    flag = SUNDIALS.KINSpilsSetJacTimesVecFn(self.kinsol_mem, kin_jacv)
                 if flag < 0:
                     raise KINSOLError(flag)
             
             if self.problem_info["prec_setup"] or self.problem_info["prec_solve"]:
                 if not self.problem_info["prec_setup"]:
-                    flag = SUNDIALS.KINSpilsSetPreconditioner(self.kinsol_mem, NULL,kin_prec_solve)
+                    IF SUNDIALS_VERSION >= (4,0,0):
+                        flag = SUNDIALS.KINSetPreconditioner(self.kinsol_mem, NULL,kin_prec_solve)
+                    ELSE:
+                        flag = SUNDIALS.KINSpilsSetPreconditioner(self.kinsol_mem, NULL,kin_prec_solve)
                     if flag < 0:
                         raise KINSOLError(flag)
                 elif not self.problem_info["prec_solve"]:
-                    flag = SUNDIALS.KINSpilsSetPreconditioner(self.kinsol_mem, kin_prec_setup, NULL)
+                    IF SUNDIALS_VERSION >= (4,0,0):
+                        flag = SUNDIALS.KINSetPreconditioner(self.kinsol_mem, kin_prec_setup, NULL)
+                    ELSE:
+                        flag = SUNDIALS.KINSpilsSetPreconditioner(self.kinsol_mem, kin_prec_setup, NULL)
                     if flag < 0:
                         raise KINSOLError(flag)
-                else:  
-                    flag = SUNDIALS.KINSpilsSetPreconditioner(self.kinsol_mem, kin_prec_setup, kin_prec_solve)
+                else:
+                    IF SUNDIALS_VERSION >= (4,0,0):
+                        flag = SUNDIALS.KINSetPreconditioner(self.kinsol_mem, kin_prec_setup, kin_prec_solve)
+                    ELSE:
+                        flag = SUNDIALS.KINSpilsSetPreconditioner(self.kinsol_mem, kin_prec_setup, kin_prec_solve)
                     if flag < 0:
                         raise KINSOLError(flag)
                 
@@ -387,8 +436,10 @@ cdef class KINSOL(Algebraic):
         """
         cdef int flag = 0, 
         cdef long int lsflag = 0
-        
-        flag = SUNDIALS.KINDlsGetLastFlag(self.kinsol_mem, &lsflag)
+        IF SUNDIALS_VERSION >= (4,0,0):
+            flag = SUNDIALS.KINGetLastLinFlag(self.kinsol_mem, &lsflag)
+        ELSE:
+            flag = SUNDIALS.KINDlsGetLastFlag(self.kinsol_mem, &lsflag)
         if flag < 0:
             raise KINSOLError(flag)
             
@@ -421,45 +472,61 @@ cdef class KINSOL(Algebraic):
         self.statistics["nbcfails"] = nbcfails
         
         if self.options["linear_solver"] == "SPGMR":
-            
-            flag = SUNDIALS.KINSpilsGetNumLinIters(self.kinsol_mem, &nliters)
+            IF SUNDIALS_VERSION >= (4,0,0):
+                flag = SUNDIALS.KINGetNumLinIters(self.kinsol_mem, &nliters)
+            ELSE:
+                flag = SUNDIALS.KINSpilsGetNumLinIters(self.kinsol_mem, &nliters)
             if flag < 0:
                 raise KINSOLError(flag)
             self.statistics["nliters"] = nliters
-            
-            flag = SUNDIALS.KINSpilsGetNumConvFails(self.kinsol_mem, &nlcfails)
+            IF SUNDIALS_VERSION >= (4,0,0):
+                flag = SUNDIALS.KINGetNumLinConvFails(self.kinsol_mem, &nlcfails)
+            ELSE:
+                flag = SUNDIALS.KINSpilsGetNumConvFails(self.kinsol_mem, &nlcfails)
             if flag < 0:
                 raise KINSOLError(flag)
             self.statistics["nlcfails"] = nlcfails
-            
-            flag = SUNDIALS.KINSpilsGetNumPrecEvals(self.kinsol_mem, &npevals)
+            IF SUNDIALS_VERSION >= (4,0,0):
+                flag = SUNDIALS.KINGetNumPrecEvals(self.kinsol_mem, &npevals)
+            ELSE:
+                flag = SUNDIALS.KINSpilsGetNumPrecEvals(self.kinsol_mem, &npevals)
             if flag < 0:
                 raise KINSOLError(flag)
             self.statistics["npevals"] = npevals
-            
-            flag = SUNDIALS.KINSpilsGetNumPrecSolves(self.kinsol_mem, &npsolves)
+            IF SUNDIALS_VERSION >= (4,0,0):
+                flag = SUNDIALS.KINGetNumPrecSolves(self.kinsol_mem, &npsolves)
+            ELSE:
+                flag = SUNDIALS.KINSpilsGetNumPrecSolves(self.kinsol_mem, &npsolves)
             if flag < 0:
                 raise KINSOLError(flag)
             self.statistics["npsolves"] = npsolves
-                
-            flag = SUNDIALS.KINSpilsGetNumJtimesEvals(self.kinsol_mem, &njevals)
+            IF SUNDIALS_VERSION >= (4,0,0):
+                flag = SUNDIALS.KINGetNumJtimesEvals(self.kinsol_mem, &njevals)
+            ELSE:
+                flag = SUNDIALS.KINSpilsGetNumJtimesEvals(self.kinsol_mem, &njevals)
             if flag < 0:
                 raise KINSOLError(flag)
             self.statistics["njevals"] = njevals
-            
-            flag = SUNDIALS.KINSpilsGetNumFuncEvals(self.kinsol_mem, &nfevalsLS)
+            IF SUNDIALS_VERSION >= (4,0,0):
+                flag = SUNDIALS.KINGetNumFuncEvals(self.kinsol_mem, &nfevalsLS)
+            ELSE:
+                flag = SUNDIALS.KINSpilsGetNumFuncEvals(self.kinsol_mem, &nfevalsLS)
             if flag < 0:
                 raise KINSOLError(flag)
             self.statistics["nfevalsLS"] = nfevalsLS
             
         elif self.options["linear_solver"] == "DENSE":
-        
-            flag = SUNDIALS.KINDlsGetNumJacEvals(self.kinsol_mem, &njevals) #The function KINDlsGetNumJacEvals returns the number of calls to the dense Jacobian approximation function.
+            IF SUNDIALS_VERSION >= (4,0,0):
+                flag = SUNDIALS.KINGetNumJacEvals(self.kinsol_mem, &njevals) #The function KINDlsGetNumJacEvals returns the number of calls to the dense Jacobian approximation function.
+            ELSE:
+                flag = SUNDIALS.KINDlsGetNumJacEvals(self.kinsol_mem, &njevals)
             if flag < 0:
                 raise KINSOLError(flag)
             self.statistics["njevals"] = njevals
-                
-            flag = SUNDIALS.KINDlsGetNumFuncEvals(self.kinsol_mem, &nfevalsLS) #The function KINDlsGetNumFuncEvals returns the number of calls to the user system function used to compute the difference quotient approximation to the dense or banded Jacobian.
+            IF SUNDIALS_VERSION >= (4,0,0):
+                flag = SUNDIALS.KINGetNumFuncEvals(self.kinsol_mem, &nfevalsLS) #The function KINDlsGetNumFuncEvals returns the number of calls to the user system function used to compute the difference quotient approximation to the dense or banded Jacobian.
+            ELSE:
+                flag = SUNDIALS.KINDlsGetNumFuncEvals(self.kinsol_mem, &nfevalsLS)
             if flag < 0:
                 raise KINSOLError(flag)
             self.statistics["nfevalsLS"] = nfevalsLS
diff --git a/src/solvers/sundials.pyx b/src/solvers/sundials.pyx
index ff89f60..0977d57 100644
--- a/src/solvers/sundials.pyx
+++ b/src/solvers/sundials.pyx
@@ -38,8 +38,12 @@ from sundials_includes cimport N_Vector, realtype, N_VectorContent_Serial, DENSE
 from sundials_includes cimport memcpy, N_VNew_Serial, DlsMat, SUNMatrix, SUNMatrixContent_Dense, SUNMatrixContent_Sparse
 IF SUNDIALS_VERSION < (5,0,0):
     from sundials_includes cimport SlsMat
-from sundials_includes cimport malloc, free, N_VCloneVectorArray_Serial
-from sundials_includes cimport N_VConst_Serial, N_VDestroy_Serial
+from sundials_includes cimport malloc, free, N_VConst_Serial
+IF SUNDIALS_VERSION >= (6,0,0):
+    from sundials_includes cimport N_VCloneVectorArray, N_VDestroy
+ELSE:
+    from sundials_includes cimport N_VCloneVectorArray_Serial as N_VCloneVectorArray
+    from sundials_includes cimport N_VDestroy_Serial as N_VDestroy
 
 include "constants.pxi" #Includes the constants (textual include)
 include "../lib/sundials_constants.pxi" #Sundials related constants
@@ -169,14 +173,14 @@ cdef class IDA(Implicit_ODE):
         
         if self.yTemp != NULL:
             #Deallocate N_Vector
-            N_VDestroy_Serial(self.yTemp)
+            N_VDestroy(self.yTemp)
             
         if self.ydTemp != NULL:
             #Deallocate N_Vector
-            N_VDestroy_Serial(self.ydTemp)
+            N_VDestroy(self.ydTemp)
             
         if self.nv_atol != NULL:
-            N_VDestroy_Serial(self.nv_atol)
+            N_VDestroy(self.nv_atol)
         
         if self.ida_mem != NULL: 
             #Free Memory
@@ -238,6 +242,10 @@ cdef class IDA(Implicit_ODE):
     cdef initialize_ida(self):
         cdef int flag #Used for return
         cdef realtype ZERO = 0.0
+        IF SUNDIALS_VERSION >= (6,0,0):
+            cdef SUNDIALS.SUNContext ctx = NULL
+            cdef void * comm = NULL
+            SUNDIALS.SUNContext_Create(comm, &ctx)
 
         self.yTemp  = arr2nv(self.y)
         self.ydTemp = arr2nv(self.yd)
@@ -248,8 +256,8 @@ cdef class IDA(Implicit_ODE):
         
         if self.pData.dimSens > 0:
             #Create the initial matrices
-            self.ySO  = N_VCloneVectorArray_Serial(self.pData.dimSens, self.yTemp)
-            self.ydSO = N_VCloneVectorArray_Serial(self.pData.dimSens, self.ydTemp)
+            self.ySO  = N_VCloneVectorArray(self.pData.dimSens, self.yTemp)
+            self.ydSO = N_VCloneVectorArray(self.pData.dimSens, self.ydTemp)
             
             #Filling the start vectors
             for i in range(self.pData.dimSens):
@@ -260,8 +268,11 @@ cdef class IDA(Implicit_ODE):
                         (<N_VectorContent_Serial>self.ySO[i].content).data[j] = self.yS0[i,j]
 
         if self.ida_mem == NULL: #The solver is not initialized
-        
-            self.ida_mem = SUNDIALS.IDACreate() #Create solver
+
+            IF SUNDIALS_VERSION >= (6,0,0):
+                self.ida_mem = SUNDIALS.IDACreate(ctx)
+            ELSE:
+                self.ida_mem = SUNDIALS.IDACreate() #Create solver
             if self.ida_mem == NULL:
                 raise IDAError(IDA_MEM_FAIL)
             
@@ -274,11 +285,23 @@ cdef class IDA(Implicit_ODE):
             if self.options["linear_solver"] == 'DENSE':
                 IF SUNDIALS_VERSION >= (3,0,0):
                     #Create a dense Sundials matrix
-                    self.sun_matrix = SUNDIALS.SUNDenseMatrix(self.pData.dim, self.pData.dim)
+                    IF SUNDIALS_VERSION >= (6,0,0):
+                        self.sun_matrix = SUNDIALS.SUNDenseMatrix(self.pData.dim, self.pData.dim, ctx)
+                    ELSE:
+                        self.sun_matrix = SUNDIALS.SUNDenseMatrix(self.pData.dim, self.pData.dim)
                     #Create a dense Sundials linear solver
-                    self.sun_linearsolver = SUNDIALS.SUNDenseLinearSolver(self.yTemp, self.sun_matrix)
+                    IF SUNDIALS_VERSION >= (4,0,0):
+                        IF SUNDIALS_VERSION >= (6,0,0):
+                            self.sun_linearsolver = SUNDIALS.SUNLinSol_Dense(self.yTemp, self.sun_matrix, ctx)
+                        ELSE:
+                            self.sun_linearsolver = SUNDIALS.SUNLinSol_Dense(self.yTemp, self.sun_matrix)
+                    ELSE:
+                        self.sun_linearsolver = SUNDIALS.SUNDenseLinearSolver(self.yTemp, self.sun_matrix)
                     #Attach it to IDA
-                    flag = SUNDIALS.IDADlsSetLinearSolver(self.ida_mem, self.sun_linearsolver, self.sun_matrix);
+                    IF SUNDIALS_VERSION >= (4,0,0):
+                        flag = SUNDIALS.IDASetLinearSolver(self.ida_mem, self.sun_linearsolver, self.sun_matrix)
+                    ELSE:
+                        flag = SUNDIALS.IDADlsSetLinearSolver(self.ida_mem, self.sun_linearsolver, self.sun_matrix)
                 ELSE:
                     #Specify the use of the internal dense linear algebra functions.
                     flag = SUNDIALS.IDADense(self.ida_mem, self.pData.dim)
@@ -288,9 +311,18 @@ cdef class IDA(Implicit_ODE):
             elif self.options["linear_solver"] == 'SPGMR':
                 IF SUNDIALS_VERSION >= (3,0,0):
                     #Create the linear solver
-                    self.sun_linearsolver = SUNDIALS.SUNSPGMR(self.yTemp, PREC_NONE, 0)
+                    IF SUNDIALS_VERSION >= (4,0,0):
+                        IF SUNDIALS_VERSION >= (6,0,0):
+                            self.sun_linearsolver = SUNDIALS.SUNLinSol_SPGMR(self.yTemp, PREC_NONE, 0, ctx)
+                        ELSE:
+                            self.sun_linearsolver = SUNDIALS.SUNLinSol_SPGMR(self.yTemp, PREC_NONE, 0)
+                    ELSE:
+                        self.sun_linearsolver = SUNDIALS.SUNSPGMR(self.yTemp, PREC_NONE, 0)
                     #Attach it to IDAS
-                    flag = SUNDIALS.IDASpilsSetLinearSolver(self.ida_mem, self.sun_linearsolver)
+                    IF SUNDIALS_VERSION >= (4,0,0):
+                        flag = SUNDIALS.IDASetLinearSolver(self.ida_mem, self.sun_linearsolver, NULL)
+                    ELSE:
+                        flag = SUNDIALS.IDASpilsSetLinearSolver(self.ida_mem, self.sun_linearsolver)
                 ELSE:
                     #Specify the use of SPGMR linear solver.
                     flag = SUNDIALS.IDASpgmr(self.ida_mem, 0) #0 == Default krylov iterations
@@ -335,14 +367,20 @@ cdef class IDA(Implicit_ODE):
             #Specify the jacobian to the solver
             if self.pData.JAC != NULL and self.options["usejac"]:
                 IF SUNDIALS_VERSION >= (3,0,0):
-                    flag = SUNDIALS.IDADlsSetJacFn(self.ida_mem, ida_jac)
+                    IF SUNDIALS_VERSION >= (4,0,0):
+                        flag = SUNDIALS.IDASetJacFn(self.ida_mem, ida_jac)
+                    ELSE:
+                        flag = SUNDIALS.IDADlsSetJacFn(self.ida_mem, ida_jac)
                 ELSE:
                     flag = SUNDIALS.IDADlsSetDenseJacFn(self.ida_mem, ida_jac)
                 if flag < 0:
                     raise IDAError(flag,self.t)
             else:
                 IF SUNDIALS_VERSION >= (3,0,0):
-                    flag = SUNDIALS.IDADlsSetJacFn(self.ida_mem, NULL)
+                    IF SUNDIALS_VERSION >= (4,0,0):
+                        flag = SUNDIALS.IDASetJacFn(self.ida_mem, NULL)
+                    ELSE:
+                        flag = SUNDIALS.IDADlsSetJacFn(self.ida_mem, NULL)
                 ELSE:
                     flag = SUNDIALS.IDADlsSetDenseJacFn(self.ida_mem, NULL)
                 if flag < 0:
@@ -352,14 +390,20 @@ cdef class IDA(Implicit_ODE):
             #Specify the jacobian times vector function
             if self.pData.JACV != NULL and self.options["usejac"]:
                 IF SUNDIALS_VERSION >= (3,0,0):
-                    flag = SUNDIALS.IDASpilsSetJacTimes(self.ida_mem, SUNDIALS.ida_spils_jtsetup_dummy, ida_jacv);
+                    IF SUNDIALS_VERSION >= (4,0,0):
+                        flag = SUNDIALS.IDASetJacTimes(self.ida_mem, SUNDIALS.ida_spils_jtsetup_dummy, ida_jacv)
+                    ELSE:
+                        flag = SUNDIALS.IDASpilsSetJacTimes(self.ida_mem, SUNDIALS.ida_spils_jtsetup_dummy, ida_jacv)
                 ELSE:
                     flag = SUNDIALS.IDASpilsSetJacTimesVecFn(self.ida_mem, ida_jacv);
                 if flag < 0:
                     raise IDAError(flag, self.t)
             else:
                 IF SUNDIALS_VERSION >= (3,0,0):
-                    flag = SUNDIALS.IDASpilsSetJacTimes(self.ida_mem, NULL, NULL);
+                    IF SUNDIALS_VERSION >= (4,0,0):
+                        flag = SUNDIALS.IDASetJacTimes(self.ida_mem, NULL, NULL)
+                    ELSE:
+                        flag = SUNDIALS.IDASpilsSetJacTimes(self.ida_mem, NULL, NULL)
                 ELSE:
                     flag = SUNDIALS.IDASpilsSetJacTimesVecFn(self.ida_mem, NULL);
                 if flag < 0:
@@ -571,8 +615,8 @@ cdef class IDA(Implicit_ODE):
             opts["output_index"] = output_index
         
         #Deallocate
-        N_VDestroy_Serial(yout)
-        N_VDestroy_Serial(ydout)
+        N_VDestroy(yout)
+        N_VDestroy(ydout)
         
         return flag, tr, yr, ydr
     
@@ -619,8 +663,8 @@ cdef class IDA(Implicit_ODE):
             self.store_statistics(IDA_TSTOP_RETURN)
         
         #Deallocate
-        N_VDestroy_Serial(yout)
-        N_VDestroy_Serial(ydout)
+        N_VDestroy(yout)
+        N_VDestroy(ydout)
         
         return flag, tr, yr, ydr
     
@@ -690,12 +734,19 @@ cdef class IDA(Implicit_ODE):
             raise IDAError(flag, self.t)
             
         return qlast
-    
+
     cpdef get_last_estimated_errors(self):
         cdef flag
         cdef N.ndarray err, pyweight, pyele
-        cdef N_Vector ele=N_VNew_Serial(self.pData.dim)
-        cdef N_Vector eweight=N_VNew_Serial(self.pData.dim)
+        IF SUNDIALS_VERSION >= (6,0,0):
+            cdef SUNDIALS.SUNContext ctx = NULL
+            cdef void* comm = NULL
+            SUNDIALS.SUNContext_Create(comm, &ctx)
+            cdef N_Vector ele = N_VNew_Serial(self.pData.dim, ctx)
+            cdef N_Vector eweight = N_VNew_Serial(self.pData.dim, ctx)
+        ELSE:
+            cdef N_Vector ele = N_VNew_Serial(self.pData.dim)
+            cdef N_Vector eweight = N_VNew_Serial(self.pData.dim)
         
         flag = SUNDIALS.IDAGetErrWeights(self.ida_mem, eweight)
         if flag < 0:
@@ -709,8 +760,8 @@ cdef class IDA(Implicit_ODE):
         
         err = pyweight*pyele
         
-        N_VDestroy_Serial(ele) #Deallocate
-        N_VDestroy_Serial(eweight) #Deallocate
+        N_VDestroy(ele) #Deallocate
+        N_VDestroy(eweight) #Deallocate
         
         return err
     
@@ -722,7 +773,13 @@ cdef class IDA(Implicit_ODE):
         """
         cdef flag
         cdef N.ndarray res
-        cdef N_Vector dky=N_VNew_Serial(self.pData.dim)
+        IF SUNDIALS_VERSION >= (6,0,0):
+            cdef SUNDIALS.SUNContext ctx = NULL
+            cdef void* comm = NULL
+            SUNDIALS.SUNContext_Create(comm, &ctx)
+            cdef N_Vector dky=N_VNew_Serial(self.pData.dim, ctx)
+        ELSE:
+            cdef N_Vector dky=N_VNew_Serial(self.pData.dim)
         
         flag = SUNDIALS.IDAGetDky(self.ida_mem, t, k, dky)
         
@@ -731,7 +788,7 @@ cdef class IDA(Implicit_ODE):
         
         res = nv2arr(dky)
         
-        N_VDestroy_Serial(dky) #Deallocate
+        N_VDestroy(dky) #Deallocate
         
         return res
         
@@ -757,7 +814,13 @@ cdef class IDA(Implicit_ODE):
             
                     A matrix containing the Ns vectors or a vector if i is specified.
         """
-        cdef N_Vector dkyS=N_VNew_Serial(self.pData.dim)
+        IF SUNDIALS_VERSION >= (6,0,0):
+            cdef SUNDIALS.SUNContext ctx = NULL
+            cdef void* comm = NULL
+            SUNDIALS.SUNContext_Create(comm, &ctx)
+            cdef N_Vector dkyS=N_VNew_Serial(self.pData.dim, ctx)
+        ELSE:
+            cdef N_Vector dkyS=N_VNew_Serial(self.pData.dim)
         cdef flag
         cdef N.ndarray res
         
@@ -773,7 +836,7 @@ cdef class IDA(Implicit_ODE):
                 
                 matrix += [nv2arr(dkyS)]
             
-            N_VDestroy_Serial(dkyS)
+            N_VDestroy(dkyS)
             
             return np.array(matrix)
         else:
@@ -784,7 +847,7 @@ cdef class IDA(Implicit_ODE):
             
             res = nv2arr(dkyS)
             
-            N_VDestroy_Serial(dkyS)
+            N_VDestroy(dkyS)
             
             return res
             
@@ -1372,13 +1435,21 @@ cdef class IDA(Implicit_ODE):
         #flag = SUNDIALS.IDADlsGetNumResEvals(self.ida_mem, &nrevalsLS)
         
         if self.options["linear_solver"] == "SPGMR":
-            flag = SUNDIALS.IDASpilsGetNumJtimesEvals(self.ida_mem, &njvevals) #Number of jac*vector
-            flag = SUNDIALS.IDASpilsGetNumResEvals(self.ida_mem, &nfevalsLS) #Number of rhs due to jac*vector
+            IF SUNDIALS_VERSION >= (4,0,0):
+                flag = SUNDIALS.IDAGetNumJtimesEvals(self.ida_mem, &njvevals) #Number of jac*vector
+                flag = SUNDIALS.IDAGetNumResEvals(self.ida_mem, &nfevalsLS) #Number of rhs due to jac*vector
+            ELSE:
+                flag = SUNDIALS.IDASpilsGetNumJtimesEvals(self.ida_mem, &njvevals) #Number of jac*vector
+                flag = SUNDIALS.IDASpilsGetNumResEvals(self.ida_mem, &nfevalsLS) #Number of rhs due to jac*vector
             self.statistics["nfcnjacs"] += nfevalsLS
             self.statistics["njacvecs"] += njvevals
         else:
-            flag = SUNDIALS.IDADlsGetNumJacEvals(self.ida_mem, &njevals)
-            flag = SUNDIALS.IDADlsGetNumResEvals(self.ida_mem, &nrevalsLS)
+            IF SUNDIALS_VERSION >= (4,0,0):
+                flag = SUNDIALS.IDAGetNumJacEvals(self.ida_mem, &njevals)
+                flag = SUNDIALS.IDAGetNumResEvals(self.ida_mem, &nrevalsLS)
+            ELSE:
+                flag = SUNDIALS.IDADlsGetNumJacEvals(self.ida_mem, &njevals)
+                flag = SUNDIALS.IDADlsGetNumResEvals(self.ida_mem, &nrevalsLS)
             self.statistics["njacs"] += njevals
             self.statistics["nfcnjacs"] += nrevalsLS
         
@@ -1517,10 +1588,10 @@ cdef class CVode(Explicit_ODE):
         
         if self.yTemp != NULL:
             #Deallocate N_Vector
-            N_VDestroy_Serial(self.yTemp)
+            N_VDestroy(self.yTemp)
             
         if self.nv_atol != NULL:
-            N_VDestroy_Serial(self.nv_atol)
+            N_VDestroy(self.nv_atol)
         
         if self.cvode_mem != NULL:
             #Free Memory
@@ -1538,8 +1609,14 @@ cdef class CVode(Explicit_ODE):
         Returns the vector of estimated local errors at the current step.
         """
         cdef int flag
-        cdef N_Vector ele=N_VNew_Serial(self.pData.dim) #Allocates a new N_Vector
-        
+        IF SUNDIALS_VERSION >= (6,0,0):
+            cdef SUNDIALS.SUNContext ctx = NULL
+            cdef void* comm = NULL
+            SUNDIALS.SUNContext_Create(comm, &ctx)
+            cdef N_Vector ele=N_VNew_Serial(self.pData.dim, ctx)
+        ELSE:
+            cdef N_Vector ele=N_VNew_Serial(self.pData.dim) #Allocates a new N_Vector
+
         flag = SUNDIALS.CVodeGetEstLocalErrors(self.cvode_mem, ele)
         if flag < 0:
             raise CVodeError(flag, self.t)
@@ -1547,7 +1624,7 @@ cdef class CVode(Explicit_ODE):
         ele_py = nv2arr(ele)
         
         #Deallocate N_Vector
-        N_VDestroy_Serial(ele)
+        N_VDestroy(ele)
         
         return ele_py
         
@@ -1614,7 +1691,13 @@ cdef class CVode(Explicit_ODE):
         Returns the solution error weights at the current step.
         """
         cdef int flag
-        cdef N_Vector eweight=N_VNew_Serial(self.pData.dim) #Allocates a new N_Vector
+        IF SUNDIALS_VERSION >= (6,0,0):
+            cdef SUNDIALS.SUNContext ctx = NULL
+            cdef void* comm = NULL
+            SUNDIALS.SUNContext_Create(comm, &ctx)
+            cdef N_Vector eweight=N_VNew_Serial(self.pData.dim, ctx)
+        ELSE:
+            cdef N_Vector eweight=N_VNew_Serial(self.pData.dim) #Allocates a new N_Vector
         
         flag = SUNDIALS.CVodeGetErrWeights(self.cvode_mem, eweight)
         if flag < 0:
@@ -1623,7 +1706,7 @@ cdef class CVode(Explicit_ODE):
         eweight_py = nv2arr(eweight)
         
         #Deallocate N_Vector
-        N_VDestroy_Serial(eweight)
+        N_VDestroy(eweight)
         
         return eweight_py
     
@@ -1682,7 +1765,11 @@ cdef class CVode(Explicit_ODE):
     cdef initialize_cvode(self):
         cdef int flag #Used for return
         cdef realtype ZERO = 0.0
-        
+        IF SUNDIALS_VERSION >= (6,0,0):
+            cdef SUNDIALS.SUNContext ctx = NULL
+            cdef void * comm = NULL
+            SUNDIALS.SUNContext_Create(comm, &ctx)
+
         if self.options["norm"] == "EUCLIDEAN":
             self.yTemp = arr2nv_euclidean(self.y)
         else:
@@ -1690,7 +1777,7 @@ cdef class CVode(Explicit_ODE):
         
         if self.pData.dimSens > 0:
             #Create the initial matrices
-            self.ySO  = N_VCloneVectorArray_Serial(self.pData.dimSens, self.yTemp)
+            self.ySO  = N_VCloneVectorArray(self.pData.dimSens, self.yTemp)
             
             #Filling the start vectors
             for i in range(self.pData.dimSens):
@@ -1708,7 +1795,10 @@ cdef class CVode(Explicit_ODE):
             
             #Create the solver
             IF SUNDIALS_VERSION >= (4,0,0):
-                self.cvode_mem = SUNDIALS.CVodeCreate(CV_BDF if self.options["discr"] == "BDF" else CV_ADAMS)
+                IF SUNDIALS_VERSION >= (6,0,0):
+                    self.cvode_mem = SUNDIALS.CVodeCreate(CV_BDF if self.options["discr"] == "BDF" else CV_ADAMS, ctx)
+                ELSE:
+                    self.cvode_mem = SUNDIALS.CVodeCreate(CV_BDF if self.options["discr"] == "BDF" else CV_ADAMS)
             ELSE:
                 self.cvode_mem = SUNDIALS.CVodeCreate(CV_BDF if self.options["discr"] == "BDF" else CV_ADAMS, CV_NEWTON if self.options["iter"] == "Newton" else CV_FUNCTIONAL)
             if self.cvode_mem == NULL:
@@ -1722,9 +1812,15 @@ cdef class CVode(Explicit_ODE):
             #For Sundials >=4.0 the iteration scheme is set after init
             IF SUNDIALS_VERSION >= (4,0,0):
                 if self.options["iter"] == "Newton":
-                    self.sun_nonlinearsolver = SUNDIALS.SUNNonlinSol_Newton(self.yTemp)
+                    IF SUNDIALS_VERSION >= (6,0,0):
+                        self.sun_nonlinearsolver = SUNDIALS.SUNNonlinSol_Newton(self.yTemp, ctx)
+                    ELSE:
+                        self.sun_nonlinearsolver = SUNDIALS.SUNNonlinSol_Newton(self.yTemp)
                 else:
-                    self.sun_nonlinearsolver = SUNDIALS.SUNNonlinSol_FixedPoint(self.yTemp, 0)
+                    IF SUNDIALS_VERSION >= (6,0,0):
+                        self.sun_nonlinearsolver = SUNDIALS.SUNNonlinSol_FixedPoint(self.yTemp, 0, ctx)
+                    ELSE:
+                        self.sun_nonlinearsolver = SUNDIALS.SUNNonlinSol_FixedPoint(self.yTemp, 0)
                 if self.sun_nonlinearsolver == NULL:
                     raise CVodeError(CV_MEM_FAIL)
                 
@@ -1764,9 +1860,15 @@ cdef class CVode(Explicit_ODE):
                     count = self.pData.dimSens if self.options["sensmethod"] == "STAGGERED" else (self.pData.dimSens+1)
                     
                     if self.options["iter"] == "Newton":
-                        self.sun_nonlinearsolver_sens = SUNDIALS.SUNNonlinSol_NewtonSens(count, self.yTemp)
+                        IF SUNDIALS_VERSION >= (6,0,0):
+                            self.sun_nonlinearsolver_sens = SUNDIALS.SUNNonlinSol_NewtonSens(count, self.yTemp, ctx)
+                        ELSE:
+                            self.sun_nonlinearsolver_sens = SUNDIALS.SUNNonlinSol_NewtonSens(count, self.yTemp)
                     else:
-                        self.sun_nonlinearsolver_sens = SUNDIALS.SUNNonlinSol_FixedPointSens(count, self.yTemp, 0)
+                        IF SUNDIALS_VERSION >= (6,0,0):
+                            self.sun_nonlinearsolver_sens = SUNDIALS.SUNNonlinSol_FixedPointSens(count, self.yTemp, 0, ctx)
+                        ELSE:
+                            self.sun_nonlinearsolver_sens = SUNDIALS.SUNNonlinSol_FixedPointSens(count, self.yTemp, 0)
                     if self.sun_nonlinearsolver_sens == NULL:
                         raise CVodeError(CV_MEM_FAIL)
                         
@@ -1810,7 +1912,13 @@ cdef class CVode(Explicit_ODE):
         """
         cdef flag
         cdef N.ndarray res
-        cdef N_Vector dky=N_VNew_Serial(self.pData.dim) #Allocates a new N_Vector
+        IF SUNDIALS_VERSION >= (6,0,0):
+            cdef SUNDIALS.SUNContext ctx = NULL
+            cdef void* comm = NULL
+            SUNDIALS.SUNContext_Create(comm, &ctx)
+            cdef N_Vector dky=N_VNew_Serial(self.pData.dim, ctx)
+        ELSE:
+            cdef N_Vector dky=N_VNew_Serial(self.pData.dim) #Allocates a new N_Vector
         
         flag = SUNDIALS.CVodeGetDky(self.cvode_mem, t, k, dky)
         
@@ -1820,7 +1928,7 @@ cdef class CVode(Explicit_ODE):
         res = nv2arr(dky)
         
         #Deallocate N_Vector
-        N_VDestroy_Serial(dky)
+        N_VDestroy(dky)
         
         return res
         
@@ -1846,8 +1954,13 @@ cdef class CVode(Explicit_ODE):
             
                     A matrix containing the Ns vectors or a vector if i is specified.
         """
-        #cdef N_Vector dkyS=N_VNew_Serial(self.pData.dimSens)
-        cdef N_Vector dkyS=N_VNew_Serial(self.pData.dim)
+        IF SUNDIALS_VERSION >= (6,0,0):
+            cdef SUNDIALS.SUNContext ctx = NULL
+            cdef void* comm = NULL
+            SUNDIALS.SUNContext_Create(comm, &ctx)
+            cdef N_Vector dkyS=N_VNew_Serial(self.pData.dim, ctx)
+        ELSE:
+            cdef N_Vector dkyS=N_VNew_Serial(self.pData.dim)
         cdef int flag
         cdef N.ndarray res
         
@@ -1862,7 +1975,7 @@ cdef class CVode(Explicit_ODE):
                 
                 matrix += [nv2arr(dkyS)]
             
-            N_VDestroy_Serial(dkyS)
+            N_VDestroy(dkyS)
             
             return N.array(matrix)
         else:
@@ -1872,7 +1985,7 @@ cdef class CVode(Explicit_ODE):
             
             res = nv2arr(dkyS)
             
-            N_VDestroy_Serial(dkyS)
+            N_VDestroy(dkyS)
             
             return res
     
@@ -1928,7 +2041,7 @@ cdef class CVode(Explicit_ODE):
             self.store_statistics(CV_TSTOP_RETURN)
         
         #Deallocate
-        N_VDestroy_Serial(yout)
+        N_VDestroy(yout)
                 
         return flag, tr, yr
     
@@ -1954,7 +2067,7 @@ cdef class CVode(Explicit_ODE):
         #Set stop time
         flag = SUNDIALS.CVodeSetStopTime(self.cvode_mem, tf)
         if flag < 0:
-            N_VDestroy_Serial(yout)
+            N_VDestroy(yout)
             raise CVodeError(flag, t)
         
         if opts["report_continuously"] or opts["output_list"] is None: 
@@ -1963,7 +2076,7 @@ cdef class CVode(Explicit_ODE):
                     
                 flag = SUNDIALS.CVode(self.cvode_mem,tf,yout,&tret,CV_ONE_STEP)
                 if flag < 0:
-                    N_VDestroy_Serial(yout)
+                    N_VDestroy(yout)
                     raise CVodeError(flag, tret)
                 
                 t = tret
@@ -2001,7 +2114,7 @@ cdef class CVode(Explicit_ODE):
             for tout in output_list:
                 flag = SUNDIALS.CVode(self.cvode_mem,tout,yout,&tret,CV_NORMAL)
                 if flag < 0:
-                    N_VDestroy_Serial(yout)
+                    N_VDestroy(yout)
                     raise CVodeError(flag, tret)
                 
                 #Store results
@@ -2029,7 +2142,7 @@ cdef class CVode(Explicit_ODE):
             opts["output_index"] = output_index
         
         #Deallocate
-        N_VDestroy_Serial(yout)
+        N_VDestroy(yout)
         
         return flag, tr, yr
     
@@ -2115,16 +2228,32 @@ cdef class CVode(Explicit_ODE):
         Updates the simulation options.
         """
         cdef flag
+        IF SUNDIALS_VERSION >= (6,0,0):
+            cdef SUNDIALS.SUNContext ctx
+            cdef void* comm = NULL
+            SUNDIALS.SUNContext_Create(comm, &ctx)
 
         #Choose a linear solver if and only if NEWTON is choosen
         if self.options["linear_solver"] == 'DENSE' and self.options["iter"] == "Newton":
             IF SUNDIALS_VERSION >= (3,0,0):
                 #Create a dense Sundials matrix
-                self.sun_matrix = SUNDIALS.SUNDenseMatrix(self.pData.dim, self.pData.dim)
+                IF SUNDIALS_VERSION >= (6,0,0):
+                    self.sun_matrix = SUNDIALS.SUNDenseMatrix(self.pData.dim, self.pData.dim, ctx)
+                ELSE:
+                    self.sun_matrix = SUNDIALS.SUNDenseMatrix(self.pData.dim, self.pData.dim)
                 #Create a dense Sundials linear solver
-                self.sun_linearsolver = SUNDIALS.SUNDenseLinearSolver(self.yTemp, self.sun_matrix)
+                IF SUNDIALS_VERSION >= (4,0,0):
+                    IF SUNDIALS_VERSION >= (6,0,0):
+                        self.sun_linearsolver = SUNDIALS.SUNLinSol_Dense(self.yTemp, self.sun_matrix, ctx)
+                    ELSE:
+                        self.sun_linearsolver = SUNDIALS.SUNLinSol_Dense(self.yTemp, self.sun_matrix)
+                ELSE:
+                    self.sun_linearsolver = SUNDIALS.SUNDenseLinearSolver(self.yTemp, self.sun_matrix)
                 #Attach it to CVode
-                flag = SUNDIALS.CVDlsSetLinearSolver(self.cvode_mem, self.sun_linearsolver, self.sun_matrix);
+                IF SUNDIALS_VERSION >= (4,0,0):
+                    flag = SUNDIALS.CVodeSetLinearSolver(self.cvode_mem, self.sun_linearsolver, self.sun_matrix)
+                ELSE:
+                    flag = SUNDIALS.CVDlsSetLinearSolver(self.cvode_mem, self.sun_linearsolver, self.sun_matrix)
                 if flag < 0:
                     raise CVodeError(flag)
             ELSE:
@@ -2136,14 +2265,21 @@ cdef class CVode(Explicit_ODE):
             #Specify the jacobian to the solver
             if self.pData.JAC != NULL and self.options["usejac"]:
                 IF SUNDIALS_VERSION >= (3,0,0):
-                    flag = SUNDIALS.CVDlsSetJacFn(self.cvode_mem, cv_jac);
+                    IF SUNDIALS_VERSION >= (4,0,0):
+                        flag = SUNDIALS.CVodeSetJacFn(self.cvode_mem, cv_jac)
+                    ELSE:
+                        flag = SUNDIALS.CVDlsSetJacFn(self.cvode_mem, cv_jac)
                 ELSE:
                     flag = SUNDIALS.CVDlsSetDenseJacFn(self.cvode_mem, cv_jac)
                 if flag < 0:
                     raise CVodeError(flag)
             else:
                 IF SUNDIALS_VERSION >= (3,0,0):
-                    flag = SUNDIALS.CVDlsSetJacFn(self.cvode_mem, NULL);
+                    IF SUNDIALS_VERSION >= (4,0,0):
+                        flag = SUNDIALS.CVodeSetJacFn(self.cvode_mem, NULL)
+                    ELSE:
+                        flag = SUNDIALS.CVDlsSetJacFn(self.cvode_mem, NULL)
+                        
                 ELSE:
                     flag = SUNDIALS.CVDlsSetDenseJacFn(self.cvode_mem, NULL)
                 if flag < 0:
@@ -2152,9 +2288,18 @@ cdef class CVode(Explicit_ODE):
         elif self.options["linear_solver"] == 'SPGMR' and self.options["iter"] == "Newton":
             IF SUNDIALS_VERSION >= (3,0,0):
                 #Create the linear solver
-                self.sun_linearsolver = SUNDIALS.SUNSPGMR(self.yTemp, self.options["precond"], self.options["maxkrylov"])
+                IF SUNDIALS_VERSION >= (4,0,0):
+                    IF SUNDIALS_VERSION >= (6,0,0):
+                        self.sun_linearsolver = SUNDIALS.SUNLinSol_SPGMR(self.yTemp, self.options["precond"], self.options["maxkrylov"], ctx)
+                    ELSE:
+                        self.sun_linearsolver = SUNDIALS.SUNLinSol_SPGMR(self.yTemp, self.options["precond"], self.options["maxkrylov"])
+                ELSE:
+                    self.sun_linearsolver = SUNDIALS.SUNSPGMR(self.yTemp, self.options["precond"], self.options["maxkrylov"])
                 #Attach it to CVode
-                flag = SUNDIALS.CVSpilsSetLinearSolver(self.cvode_mem, self.sun_linearsolver)
+                IF SUNDIALS_VERSION >= (4,0,0):
+                    flag = SUNDIALS.CVodeSetLinearSolver(self.cvode_mem, self.sun_linearsolver, NULL)
+                ELSE:
+                    flag = SUNDIALS.CVSpilsSetLinearSolver(self.cvode_mem, self.sun_linearsolver)
             ELSE:
                 #Specify the use of CVSPGMR linear solver.
                 flag = SUNDIALS.CVSpgmr(self.cvode_mem, self.options["precond"], self.options["maxkrylov"])
@@ -2162,26 +2307,38 @@ cdef class CVode(Explicit_ODE):
                 raise CVodeError(flag) 
                 
             if self.pData.PREC_SOLVE != NULL:
-                if self.pData.PREC_SETUP != NULL: 
-                    flag = SUNDIALS.CVSpilsSetPreconditioner(self.cvode_mem, cv_prec_setup, cv_prec_solve)
+                if self.pData.PREC_SETUP != NULL:
+                    IF SUNDIALS_VERSION >= (4,0,0):
+                        flag = SUNDIALS.CVodeSetPreconditioner(self.cvode_mem, cv_prec_setup, cv_prec_solve)
+                    ELSE:
+                        flag = SUNDIALS.CVSpilsSetPreconditioner(self.cvode_mem, cv_prec_setup, cv_prec_solve)
                     if flag < 0:
                         raise CVodeError(flag)
                 else:
-                    flag = SUNDIALS.CVSpilsSetPreconditioner(self.cvode_mem, NULL, cv_prec_solve)
+                    IF SUNDIALS_VERSION >= (4,0,0):
+                        flag = SUNDIALS.CVodeSetPreconditioner(self.cvode_mem, NULL, cv_prec_solve)
+                    ELSE:
+                        flag = SUNDIALS.CVSpilsSetPreconditioner(self.cvode_mem, NULL, cv_prec_solve)
                     if flag < 0: 
                         raise CVodeError(flag)
                   
             #Specify the jacobian times vector function
             if self.pData.JACV != NULL and self.options["usejac"]:
                 IF SUNDIALS_VERSION >= (3,0,0):
-                    flag = SUNDIALS.CVSpilsSetJacTimes(self.cvode_mem, SUNDIALS.cv_spils_jtsetup_dummy, cv_jacv);
+                    IF SUNDIALS_VERSION >= (4,0,0):
+                        flag = SUNDIALS.CVodeSetJacTimes(self.cvode_mem, SUNDIALS.cv_spils_jtsetup_dummy, cv_jacv)
+                    ELSE:
+                        flag = SUNDIALS.CVSpilsSetJacTimes(self.cvode_mem, SUNDIALS.cv_spils_jtsetup_dummy, cv_jacv)
                 ELSE:
                     flag = SUNDIALS.CVSpilsSetJacTimesVecFn(self.cvode_mem, cv_jacv)
                 if flag < 0: 
                     raise CVodeError(flag)
             else:
                 IF SUNDIALS_VERSION >= (3,0,0):
-                    flag = SUNDIALS.CVSpilsSetJacTimes(self.cvode_mem, NULL, NULL);
+                    IF SUNDIALS_VERSION >= (4,0,0):
+                        flag = SUNDIALS.CVodeSetJacTimes(self.cvode_mem, NULL, NULL)
+                    ELSE:
+                        flag = SUNDIALS.CVSpilsSetJacTimes(self.cvode_mem, NULL, NULL)
                 ELSE:
                     flag = SUNDIALS.CVSpilsSetJacTimesVecFn(self.cvode_mem, NULL)
                 if flag < 0:
@@ -2196,11 +2353,17 @@ cdef class CVode(Explicit_ODE):
             #Specify the use of CVSPGMR linear solver.
             if self.problem_info["jac_fcn_nnz"] == -1:
                 raise AssimuloException("Need to specify the number of non zero elements in the Jacobian via the option 'jac_nnz'")
-                
+
             IF SUNDIALS_VERSION >= (3,0,0):
-                self.sun_matrix = SUNDIALS.SUNSparseMatrix(self.pData.dim, self.pData.dim, self.problem_info["jac_fcn_nnz"], CSC_MAT)
+                IF SUNDIALS_VERSION >= (6,0,0):
+                    self.sun_matrix = SUNDIALS.SUNSparseMatrix(self.pData.dim, self.pData.dim, self.problem_info["jac_fcn_nnz"], CSC_MAT, ctx)
+                ELSE:
+                    self.sun_matrix = SUNDIALS.SUNSparseMatrix(self.pData.dim, self.pData.dim, self.problem_info["jac_fcn_nnz"], CSC_MAT)
                 self.sun_linearsolver = SUNDIALS.SUNSuperLUMT(self.yTemp, self.sun_matrix, self.options["num_threads"])
-                flag = SUNDIALS.CVDlsSetLinearSolver(self.cvode_mem, self.sun_linearsolver, self.sun_matrix)
+                IF SUNDIALS_VERSION >= (4,0,0):
+                    flag = SUNDIALS.CVodeSetLinearSolver(self.cvode_mem, self.sun_linearsolver, self.sun_matrix)
+                ELSE:
+                    flag = SUNDIALS.CVDlsSetLinearSolver(self.cvode_mem, self.sun_linearsolver, self.sun_matrix)
             ELSE:
                 flag = SUNDIALS.CVSuperLUMT(self.cvode_mem, self.options["num_threads"], self.pData.dim, self.problem_info["jac_fcn_nnz"])
             if flag < 0:
@@ -2209,7 +2372,10 @@ cdef class CVode(Explicit_ODE):
             #Specify the jacobian to the solver
             if self.pData.JAC != NULL and self.options["usejac"]:
                 IF SUNDIALS_VERSION >= (3,0,0):
-                    flag = SUNDIALS.CVDlsSetJacFn(self.cvode_mem, cv_jac_sparse)
+                    IF SUNDIALS_VERSION >= (4,0,0):
+                        flag = SUNDIALS.CVodeSetJacFn(self.cvode_mem, cv_jac_sparse)
+                    ELSE:
+                        flag = SUNDIALS.CVDlsSetJacFn(self.cvode_mem, cv_jac_sparse)
                 ELSE:
                     flag = SUNDIALS.CVSlsSetSparseJacFn(self.cvode_mem, cv_jac_sparse)
                 if flag < 0:
@@ -3031,24 +3197,41 @@ cdef class CVode(Explicit_ODE):
         cdef realtype hinused = 0.0, hlast = 0.0, hcur = 0.0, tcur = 0.0
 
         if self.options["linear_solver"] == "SPGMR":
-            flag = SUNDIALS.CVSpilsGetNumJtimesEvals(self.cvode_mem, &njvevals) #Number of jac*vector
-            flag = SUNDIALS.CVSpilsGetNumRhsEvals(self.cvode_mem, &nfevalsLS) #Number of rhs due to jac*vector
+            IF SUNDIALS_VERSION >= (4,0,0):
+                flag = SUNDIALS.CVodeGetNumJtimesEvals(self.cvode_mem, &njvevals) #Number of jac*vector
+                flag = SUNDIALS.CVodeGetNumRhsEvals(self.cvode_mem, &nfevalsLS) #Number of rhs due to jac*vector
+            ELSE:
+                flag = SUNDIALS.CVSpilsGetNumJtimesEvals(self.cvode_mem, &njvevals) #Number of jac*vector
+                flag = SUNDIALS.CVSpilsGetNumRhsEvals(self.cvode_mem, &nfevalsLS) #Number of rhs due to jac*vector
             self.statistics["njacvecs"]  += njvevals
         elif self.options["linear_solver"] == "SPARSE":
             IF SUNDIALS_VERSION >= (3,0,0):
-                flag = SUNDIALS.CVDlsGetNumJacEvals(self.cvode_mem, &njevals)
+                IF SUNDIALS_VERSION >= (4,0,0):
+                    flag = SUNDIALS.CVodeGetNumJacEvals(self.cvode_mem, &njevals)
+                ELSE:
+                    flag = SUNDIALS.CVDlsGetNumJacEvals(self.cvode_mem, &njevals)
             ELSE:
                 flag = SUNDIALS.CVSlsGetNumJacEvals(self.cvode_mem, &njevals)
             self.statistics["njacs"]   += njevals
         else:
-            flag = SUNDIALS.CVDlsGetNumJacEvals(self.cvode_mem, &njevals) #Number of jac evals
-            flag = SUNDIALS.CVDlsGetNumRhsEvals(self.cvode_mem, &nfevalsLS) #Number of res evals due to jac evals
+            IF SUNDIALS_VERSION >= (4,0,0):
+                flag = SUNDIALS.CVodeGetNumJacEvals(self.cvode_mem, &njevals) #Number of jac evals
+                flag = SUNDIALS.CVodeGetNumLinRhsEvals(self.cvode_mem, &nfevalsLS) #Number of res evals due to jac evals
+            ELSE:
+                flag = SUNDIALS.CVDlsGetNumJacEvals(self.cvode_mem, &njevals) #Number of jac evals
+                flag = SUNDIALS.CVDlsGetNumRhsEvals(self.cvode_mem, &nfevalsLS) #Number of res evals due to jac evals
             self.statistics["njacs"]   += njevals
         if self.pData.PREC_SOLVE != NULL:
-            flag = SUNDIALS.CVSpilsGetNumPrecSolves(self.cvode_mem, &npsolves)
+            IF SUNDIALS_VERSION >= (4,0,0):
+                flag = SUNDIALS.CVodeGetNumPrecSolves(self.cvode_mem, &npsolves)
+            ELSE:
+                flag = SUNDIALS.CVSpilsGetNumPrecSolves(self.cvode_mem, &npsolves)
             self.statistics["nprecs"]  += npsolves
         if self.pData.PREC_SETUP != NULL:
-            flag = SUNDIALS.CVSpilsGetNumPrecEvals(self.cvode_mem, &npevals)
+            IF SUNDIALS_VERSION >= (4,0,0):
+                flag = SUNDIALS.CVodeGetNumPrecEvals(self.cvode_mem, &npevals)
+            ELSE:
+                flag = SUNDIALS.CVSpilsGetNumPrecEvals(self.cvode_mem, &npevals)
             self.statistics["nprecsetups"]   += npevals
             
         flag = SUNDIALS.CVodeGetNumGEvals(self.cvode_mem, &ngevals) #Number of root evals
