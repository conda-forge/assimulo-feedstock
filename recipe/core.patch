diff --git a/setup.py b/setup.py
index ffb58a6..f29ff44 100644
--- a/setup.py
+++ b/setup.py
@@ -504,6 +504,8 @@ class Assimulo_prepare(object):
             
             if self.SUNDIALS_version >= (3,0,0):
                 ext_list[-1].libraries = ["sundials_cvodes", "sundials_nvecserial", "sundials_idas", "sundials_sunlinsoldense", "sundials_sunlinsolspgmr", "sundials_sunmatrixdense", "sundials_sunmatrixsparse"]
+                if self.SUNDIALS_version >= (7,0,0):
+                    ext_list[-1].libraries.extend(["sundials_core"])
             else:
                 ext_list[-1].libraries = ["sundials_cvodes", "sundials_nvecserial", "sundials_idas"]
             if self.sundials_with_superlu and self.with_SLU: #If SUNDIALS is compiled with support for SuperLU
@@ -523,6 +525,8 @@ class Assimulo_prepare(object):
             ext_list[-1].include_dirs = [np.get_include(), "assimulo","assimulo"+os.sep+"lib", self.incdirs]
             ext_list[-1].library_dirs = [self.libdirs]
             ext_list[-1].libraries = ["sundials_kinsol", "sundials_nvecserial"]
+            if self.SUNDIALS_version >= (7,0,0):
+                ext_list[-1].libraries.extend(["sundials_core"])
             
             if self.sundials_with_superlu and self.with_SLU: #If SUNDIALS is compiled with support for SuperLU
                 ext_list[-1].include_dirs.append(self.SLUincdir)
diff --git a/src/lib/sundials_callbacks.pxi b/src/lib/sundials_callbacks.pxi
index 1ea7889..e970aea 100644
--- a/src/lib/sundials_callbacks.pxi
+++ b/src/lib/sundials_callbacks.pxi
@@ -24,7 +24,10 @@ from numpy cimport PyArray_DATA
 cdef N_Vector N_VNewEmpty_Euclidean(long int n) noexcept:
     IF SUNDIALS_VERSION >= (6,0,0):
         cdef SUNDIALS.SUNContext ctx = NULL
-        cdef void * comm = NULL
+        IF SUNDIALS_VERSION >= (7,0,0):
+            cdef SUNDIALS.SUNComm comm = 0
+        ELSE:
+            cdef void* comm = NULL
         SUNDIALS.SUNContext_Create(comm, &ctx)
         cdef N_Vector v = N_VNew_Serial(n, ctx)
     ELSE:
@@ -39,7 +42,10 @@ cdef inline N_Vector arr2nv(x) noexcept:
     cdef void* data_ptr=PyArray_DATA(ndx)
     IF SUNDIALS_VERSION >= (6,0,0):
         cdef SUNDIALS.SUNContext ctx = NULL
-        cdef void * comm = NULL
+        IF SUNDIALS_VERSION >= (7,0,0):
+            cdef SUNDIALS.SUNComm comm = 0
+        ELSE:
+            cdef void* comm = NULL
         SUNDIALS.SUNContext_Create(comm, &ctx)
         cdef N_Vector v = N_VNew_Serial(n, ctx)
     ELSE:
@@ -63,7 +69,7 @@ cdef inline void arr2nv_inplace(x, N_Vector out) noexcept:
     cdef void* data_ptr=PyArray_DATA(ndx)
     memcpy((<N_VectorContent_Serial>out.content).data, data_ptr, n*sizeof(realtype))
     
-cdef inline np.ndarray nv2arr(N_Vector v) noexcept:
+cdef inline np.ndarray nv2arr(N_Vector v):
     cdef long int n = (<N_VectorContent_Serial>v.content).length
     cdef realtype* v_data = (<N_VectorContent_Serial>v.content).data
     cdef np.ndarray[realtype, ndim=1, mode='c'] x=np.empty(n)
@@ -82,7 +88,7 @@ cdef inline void nv2mat_inplace(int Ns, N_Vector *v, np.ndarray o) noexcept:
         for j in range(Nf):
             o[j,i] = (<N_VectorContent_Serial>v[i].content).data[j]
 
-cdef inline realtype2arr(realtype *data, int n) noexcept:
+cdef inline realtype2arr(realtype *data, int n):
     """Create new numpy array from realtype*"""
     cdef np.ndarray[realtype, ndim=1, mode='c'] x=np.empty(n)
     memcpy(PyArray_DATA(x), data, n*sizeof(realtype))
diff --git a/src/lib/sundials_callbacks_kinsol.pxi b/src/lib/sundials_callbacks_kinsol.pxi
index 3e637e9..3066c29 100644
--- a/src/lib/sundials_callbacks_kinsol.pxi
+++ b/src/lib/sundials_callbacks_kinsol.pxi
@@ -256,41 +256,40 @@ ELSE:
         #print("<functionNorm: %g, scaledStepLength: %g, tolerance: %g>"%(fnorm, snorm, pData.TOL))
 
 
-cdef void kin_info(const char *module, const char *function, char *msg, void *eh_data) noexcept:
-    cdef ProblemDataEquationSolver pData = <ProblemDataEquationSolver>eh_data
-    cdef int flag
-    cdef realtype fnorm
-    
-    if str(function) == "KINSol" and "fnorm" in str(msg):
-        #fnorm = float(msg.split("fnorm = ")[-1].strip())
-        flag = SUNDIALS.KINGetFuncNorm(pData.KIN_MEM, &fnorm)
-        pData.nl_fnorm.append(fnorm)
-        
-    pData.log.append([module, function, msg])
-    
-    #print("KinsolInfo <calling_function:%s>"%function)
-    #print("<message: %s>"%msg)
-    """
-    # Get the number of iterations
-    KINGetNumNonlinSolvIters(kin_mem, &nniters)
-    
-    
-    /* Only output an iteration under certain conditions:
-     *  1. nle_solver_log > 2
-     *  2. The calling function is either KINSolInit or KINSol
-     *  3. The message string starts with "nni"
-     *
-     *  This approach gives one printout per iteration
-    
-    
-    if ("KINSolInit" in function or "KINSol" in function) and "nni" in msg:
-        print("<iteration_index:%d>"%nniters)
-        print("ivs", N_VGetArrayPointer(kin_mem->kin_uu), block->n))
-        print("<scaled_residual_norm:%E>", kin_mem->kin_fnorm))
-        print("residuals", 
-            realtype* f = N_VGetArrayPointer(kin_mem->kin_fval);
-            f[i]*residual_scaling_factors[i])
-    """
+
+    cdef void kin_info(const char *module, const char *function, char *msg, void *eh_data) noexcept:
+        cdef ProblemDataEquationSolver pData = <ProblemDataEquationSolver>eh_data
+        cdef int flag
+        cdef realtype fnorm
+
+        if str(function) == "KINSol" and "fnorm" in str(msg):
+            #fnorm = float(msg.split("fnorm = ")[-1].strip())
+            flag = SUNDIALS.KINGetFuncNorm(pData.KIN_MEM, &fnorm)
+            pData.nl_fnorm.append(fnorm)
+
+        pData.log.append([module, function, msg])
+
+        #print("KinsolInfo <calling_function:%s>"%function)
+        #print("<message: %s>"%msg)
+        """
+        # Get the number of iterations
+        KINGetNumNonlinSolvIters(kin_mem, &nniters)
+
+        /* Only output an iteration under certain conditions:
+        *  1. nle_solver_log > 2
+        *  2. The calling function is either KINSolInit or KINSol
+        *  3. The message string starts with "nni"
+        *
+        *  This approach gives one printout per iteration
+
+        if ("KINSolInit" in function or "KINSol" in function) and "nni" in msg:
+            print("<iteration_index:%d>"%nniters)
+            print("ivs", N_VGetArrayPointer(kin_mem->kin_uu), block->n))
+            print("<scaled_residual_norm:%E>", kin_mem->kin_fnorm))
+            print("residuals",
+                realtype* f = N_VGetArrayPointer(kin_mem->kin_fval);
+                f[i]*residual_scaling_factors[i])
+        """
 
 cdef class ProblemDataEquationSolver:
     cdef:
diff --git a/src/lib/sundials_includes.pxd b/src/lib/sundials_includes.pxd
index 0480bf0..1b45145 100644
--- a/src/lib/sundials_includes.pxd
+++ b/src/lib/sundials_includes.pxd
@@ -36,7 +36,11 @@ IF SUNDIALS_VERSION >= (6,0,0):
         ctypedef _SUNContext * SUNContext
         cdef struct _SUNContext:
             pass
-        int SUNContext_Create(void* comm, SUNContext* ctx) noexcept
+        IF SUNDIALS_VERSION >= (7,0,0):
+            ctypedef int SUNComm
+            int SUNContext_Create(SUNComm comm, SUNContext* ctx) noexcept
+        ELSE:
+            int SUNContext_Create(void* comm, SUNContext* ctx) noexcept
 
 IF SUNDIALS_VERSION >= (7,0,0):
     cdef extern from "sundials/sundials_context.h":
@@ -48,6 +52,8 @@ IF SUNDIALS_VERSION >= (6,0,0):
     cdef extern from "sundials/sundials_types.h":
         ctypedef double sunrealtype
         ctypedef bint sunbooleantype
+        IF SUNDIALS_VERSION >= (7,0,0):
+            cdef int SUN_COMM_NULL
     ctypedef double realtype
     ctypedef bint booleantype
 ELSE:
@@ -494,7 +500,7 @@ ELSE:
                                         N_Vector tmp2, N_Vector tmp3) noexcept
             int CVSlsSetSparseJacFn(void *cvode_mem, CVSlsSparseJacFn jac) noexcept
             int CVSlsGetNumJacEvals(void *cvode_mem, long int *njevals) noexcept
-        cdef inline tuple version() noexcept: return (2,6,0)
+        cdef inline tuple version(): return (2,6,0)
         IF SUNDIALS_WITH_SUPERLU:
             cdef extern from "cvodes/cvodes_superlumt.h":
                 int CVSuperLUMT(void *cvode_mem, int numthreads, int n, int nnz) noexcept
diff --git a/src/solvers/kinsol.pyx b/src/solvers/kinsol.pyx
index de9bd9e..341f75a 100644
--- a/src/solvers/kinsol.pyx
+++ b/src/solvers/kinsol.pyx
@@ -183,7 +183,10 @@ cdef class KINSOL(Algebraic):
         cdef int flag #Used for return
         IF SUNDIALS_VERSION >= (6,0,0):
             cdef SUNDIALS.SUNContext ctx = NULL
-            cdef void * comm = NULL
+            IF SUNDIALS_VERSION >= (7,0,0):
+                cdef SUNDIALS.SUNComm comm = SUNDIALS.SUN_COMM_NULL
+            ELSE:
+                cdef void* comm = NULL
             SUNDIALS.SUNContext_Create(comm, &ctx)
 
         self.y_temp  = arr2nv(self.y)
@@ -230,7 +233,10 @@ cdef class KINSOL(Algebraic):
     cpdef add_linear_solver(self):
         IF SUNDIALS_VERSION >= (6,0,0):
             cdef SUNDIALS.SUNContext ctx = NULL
-            cdef void * comm = NULL
+            IF SUNDIALS_VERSION >= (7,0,0):
+                cdef SUNDIALS.SUNComm comm = SUNDIALS.SUN_COMM_NULL
+            ELSE:
+                cdef void* comm = NULL
             SUNDIALS.SUNContext_Create(comm, &ctx)
         if self.options["linear_solver"] == "DENSE":
             IF SUNDIALS_VERSION >= (3,0,0):
diff --git a/src/solvers/sundials.pyx b/src/solvers/sundials.pyx
index 84cc9b6..93d8ce7 100644
--- a/src/solvers/sundials.pyx
+++ b/src/solvers/sundials.pyx
@@ -239,7 +239,10 @@ cdef class IDA(Implicit_ODE):
         cdef realtype ZERO = 0.0
         IF SUNDIALS_VERSION >= (6,0,0):
             cdef SUNDIALS.SUNContext ctx = NULL
-            cdef void * comm = NULL
+            IF SUNDIALS_VERSION >= (7,0,0):
+                cdef SUNDIALS.SUNComm comm = SUNDIALS.SUN_COMM_NULL
+            ELSE:
+                cdef void* comm = NULL
             SUNDIALS.SUNContext_Create(comm, &ctx)
 
         self.yTemp  = arr2nv(self.y)
@@ -739,7 +742,10 @@ cdef class IDA(Implicit_ODE):
         cdef np.ndarray err, pyweight, pyele
         IF SUNDIALS_VERSION >= (6,0,0):
             cdef SUNDIALS.SUNContext ctx = NULL
-            cdef void* comm = NULL
+            IF SUNDIALS_VERSION >= (7,0,0):
+                cdef SUNDIALS.SUNComm comm = SUNDIALS.SUN_COMM_NULL
+            ELSE:
+                cdef void* comm = NULL
             SUNDIALS.SUNContext_Create(comm, &ctx)
             cdef N_Vector ele = N_VNew_Serial(self.pData.dim, ctx)
             cdef N_Vector eweight = N_VNew_Serial(self.pData.dim, ctx)
@@ -774,7 +780,10 @@ cdef class IDA(Implicit_ODE):
         cdef np.ndarray res
         IF SUNDIALS_VERSION >= (6,0,0):
             cdef SUNDIALS.SUNContext ctx = NULL
-            cdef void* comm = NULL
+            IF SUNDIALS_VERSION >= (7,0,0):
+                cdef SUNDIALS.SUNComm comm = SUNDIALS.SUN_COMM_NULL
+            ELSE:
+                cdef void* comm = NULL
             SUNDIALS.SUNContext_Create(comm, &ctx)
             cdef N_Vector dky=N_VNew_Serial(self.pData.dim, ctx)
         ELSE:
@@ -815,7 +824,10 @@ cdef class IDA(Implicit_ODE):
         """
         IF SUNDIALS_VERSION >= (6,0,0):
             cdef SUNDIALS.SUNContext ctx = NULL
-            cdef void* comm = NULL
+            IF SUNDIALS_VERSION >= (7,0,0):
+                cdef SUNDIALS.SUNComm comm = SUNDIALS.SUN_COMM_NULL
+            ELSE:
+                cdef void* comm = NULL
             SUNDIALS.SUNContext_Create(comm, &ctx)
             cdef N_Vector dkyS=N_VNew_Serial(self.pData.dim, ctx)
         ELSE:
@@ -1614,7 +1626,10 @@ cdef class CVode(Explicit_ODE):
         cdef int flag
         IF SUNDIALS_VERSION >= (6,0,0):
             cdef SUNDIALS.SUNContext ctx = NULL
-            cdef void* comm = NULL
+            IF SUNDIALS_VERSION >= (7,0,0):
+                cdef SUNDIALS.SUNComm comm = SUNDIALS.SUN_COMM_NULL
+            ELSE:
+                cdef void* comm = NULL
             SUNDIALS.SUNContext_Create(comm, &ctx)
             cdef N_Vector ele=N_VNew_Serial(self.pData.dim, ctx)
         ELSE:
@@ -1696,7 +1711,10 @@ cdef class CVode(Explicit_ODE):
         cdef int flag
         IF SUNDIALS_VERSION >= (6,0,0):
             cdef SUNDIALS.SUNContext ctx = NULL
-            cdef void* comm = NULL
+            IF SUNDIALS_VERSION >= (7,0,0):
+                cdef SUNDIALS.SUNComm comm = SUNDIALS.SUN_COMM_NULL
+            ELSE:
+                cdef void* comm = NULL
             SUNDIALS.SUNContext_Create(comm, &ctx)
             cdef N_Vector eweight=N_VNew_Serial(self.pData.dim, ctx)
         ELSE:
@@ -1770,7 +1788,10 @@ cdef class CVode(Explicit_ODE):
         cdef realtype ZERO = 0.0
         IF SUNDIALS_VERSION >= (6,0,0):
             cdef SUNDIALS.SUNContext ctx = NULL
-            cdef void * comm = NULL
+            IF SUNDIALS_VERSION >= (7,0,0):
+                cdef SUNDIALS.SUNComm comm = SUNDIALS.SUN_COMM_NULL
+            ELSE:
+                cdef void* comm = NULL
             SUNDIALS.SUNContext_Create(comm, &ctx)
 
         if self.options["norm"] == "EUCLIDEAN":
@@ -1930,7 +1951,10 @@ cdef class CVode(Explicit_ODE):
         cdef np.ndarray res
         IF SUNDIALS_VERSION >= (6,0,0):
             cdef SUNDIALS.SUNContext ctx = NULL
-            cdef void* comm = NULL
+            IF SUNDIALS_VERSION >= (7,0,0):
+                cdef SUNDIALS.SUNComm comm = SUNDIALS.SUN_COMM_NULL
+            ELSE:
+                cdef void* comm = NULL
             SUNDIALS.SUNContext_Create(comm, &ctx)
             cdef N_Vector dky=N_VNew_Serial(self.pData.dim, ctx)
         ELSE:
@@ -1972,7 +1996,10 @@ cdef class CVode(Explicit_ODE):
         """
         IF SUNDIALS_VERSION >= (6,0,0):
             cdef SUNDIALS.SUNContext ctx = NULL
-            cdef void* comm = NULL
+            IF SUNDIALS_VERSION >= (7,0,0):
+                cdef SUNDIALS.SUNComm comm = SUNDIALS.SUN_COMM_NULL
+            ELSE:
+                cdef void* comm = NULL
             SUNDIALS.SUNContext_Create(comm, &ctx)
             cdef N_Vector dkyS=N_VNew_Serial(self.pData.dim, ctx)
         ELSE:
@@ -2251,8 +2278,11 @@ cdef class CVode(Explicit_ODE):
         """
         cdef flag
         IF SUNDIALS_VERSION >= (6,0,0):
-            cdef SUNDIALS.SUNContext ctx
-            cdef void* comm = NULL
+            cdef SUNDIALS.SUNContext ctx = NULL
+            IF SUNDIALS_VERSION >= (7,0,0):
+                cdef SUNDIALS.SUNComm comm = SUNDIALS.SUN_COMM_NULL
+            ELSE:
+                cdef void* comm = NULL
             SUNDIALS.SUNContext_Create(comm, &ctx)
 
         #Choose a linear solver if and only if NEWTON is choosen
